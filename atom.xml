<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曲度小屋</title>
  
  <subtitle>前端学习记录</subtitle>
  <link href="http://maya1900.github.io/atom.xml" rel="self"/>
  
  <link href="http://maya1900.github.io/"/>
  <updated>2022-04-02T13:54:16.015Z</updated>
  <id>http://maya1900.github.io/</id>
  
  <author>
    <name>马阳</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js手写系列</title>
    <link href="http://maya1900.github.io/article/2022/jsdomyself/"/>
    <id>http://maya1900.github.io/article/2022/jsdomyself/</id>
    <published>2022-04-01T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li>双重for循环</li><li>filter + indexof</li><li>sort + for</li><li>filter + hasOwnPorperty</li><li>Set</li></ol><p>测试：</p><p><code>var arr = [1,1,&#39;true&#39;,&#39;true&#39;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#39;NaN&#39;, 0, 0, &#39;a&#39;, &#39;a&#39;,&#123;&#125;,&#123;&#125;]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] == arr[j]) &#123;</span><br><span class="line">        arr.splice(j, <span class="number">1</span>)</span><br><span class="line">        j--</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [1, &#x27;true&#x27;, 15, false, undefined, NaN, NaN, &#x27;NaN&#x27;, &#x27;a&#x27;, &#123;…&#125;, &#123;…&#125;]</span></span><br><span class="line"><span class="comment">// NaN &#123;&#125; 无法去重，null消失</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> arr.indexOf(item) === index)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [1, &#x27;true&#x27;, true, 15, false, undefined, null, &#x27;NaN&#x27;, 0, &#x27;a&#x27;, &#123;…&#125;, &#123;…&#125;]</span></span><br><span class="line"><span class="comment">// &#123;&#125; 无法去重</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  arr = arr.sort()</span><br><span class="line">  <span class="keyword">var</span> res = [], prev</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prev != arr[i]) &#123;</span><br><span class="line">      res.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    prev = arr[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[0, 1, 15, NaN, NaN, &#x27;NaN&#x27;, &#123;…&#125;, &#123;…&#125;, &#x27;a&#x27;, false, null, &#x27;true&#x27;, true, undefined]</span></span><br><span class="line"><span class="comment">// NaN &#123;&#125; 无法去重</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.hasOwnProperty(<span class="keyword">typeof</span> item + item) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + item] = <span class="literal">true</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [1, &#x27;true&#x27;, true, 15, false, undefined, null, NaN, &#x27;NaN&#x27;, 0, &#x27;a&#x27;, &#123;…&#125;]</span></span><br><span class="line"><span class="comment">// 完全去重！！</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [1, &#x27;true&#x27;, true, 15, false, undefined, null, NaN, &#x27;NaN&#x27;, 0, &#x27;a&#x27;, &#123;…&#125;, &#123;…&#125;]</span></span><br><span class="line"><span class="comment">// &#123;&#125; 无法去重</span></span><br></pre></td></tr></table></figure><h2 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h2><p>双重 for 循环 &gt; filter + indexOf &gt; sort + for &gt; filter + hasOwnProperty &gt; Set </p><h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h1><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><blockquote><p>新对象复制已有对象的对象属性的引用。</p></blockquote><p>只拷贝第一层的对象，对于属性值是对象的只拷贝一份内存地址。</p><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> source = &#123; <span class="attr">a</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;</span><br><span class="line"><span class="built_in">Object</span>.assign(target, source)</span><br><span class="line">target.a = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(source, target); </span><br><span class="line"><span class="comment">// &#123; a: &#x27;1&#x27;, b: &#123; c: 2 &#125; &#125; &#123; a: 2, b: &#123; c: 2 &#125; &#125;</span></span><br><span class="line">target.b.c = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(source, target);</span><br><span class="line"><span class="comment">// &#123; a: &#x27;1&#x27;, b: &#123; c: 3 &#125; &#125; &#123; a: 2, b: &#123; c: 3 &#125; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">1</span> &#125;&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;...obj&#125;</span><br><span class="line">obj2.b.c = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj, obj2); </span><br><span class="line"><span class="comment">// &#123; a: 1, b: &#123; c: 2 &#125; &#125; &#123; a: 1, b: &#123; c: 2 &#125; &#125;</span></span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><h3 id="JSON-parse-JSON-stringify"><a href="#JSON-parse-JSON-stringify" class="headerlink" title="JSON.parse(JSON.stringify())"></a>JSON.parse(JSON.stringify())</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj1));</span><br><span class="line">obj2.b.c = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1, obj2);</span><br><span class="line"><span class="comment">// &#123; a: 1, b: &#123; c: 2 &#125; &#125; &#123; a: 1, b: &#123; c: 3 &#125; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意无法拷贝值是函数，Date/RegExp，原型链及循环引用。</p><h3 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj !== <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj, map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isObject(obj)) <span class="keyword">return</span> obj;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (map.get(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(obj)</span><br><span class="line">  &#125;</span><br><span class="line">  map.set(obj, result)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isObject(obj[key])) &#123;</span><br><span class="line">      result[key] = deepClone(obj[key], map)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span> &#125;, <span class="attr">c</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#125;</span><br><span class="line">obj1.d = obj1 <span class="comment">// 循环引用</span></span><br><span class="line"><span class="keyword">var</span> obj2 = deepClone(obj1)</span><br><span class="line"><span class="comment">// var obj2 = JSON.parse(JSON.stringify(obj1))</span></span><br><span class="line"><span class="comment">// TypeError: Converting circular structure to JSON</span></span><br><span class="line">obj2.a.b = <span class="number">2</span></span><br><span class="line">obj2.c[<span class="number">1</span>] = <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1, obj2);</span><br><span class="line"><span class="comment">// &lt;ref *1&gt; &#123; a: &#123; b: 1 &#125;, c: [ 1, 2, 3 ], d: [Circular *1] &#125; &lt;ref *1&gt; &#123; a: &#123; b: 2 &#125;, c: [ 1, 4, 3 ], d: [Circular *1] &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a>lodash</h3><h1 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h1><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      func.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, debounce(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  fn(<span class="string">&#x27;hhh&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> end = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">if</span> (end - start &gt;= delay) &#123;</span><br><span class="line">      func()</span><br><span class="line">      start = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call/apply/bind"></a>call/apply/bind</h1><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span>;</span><br><span class="line">  context.fn = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">var</span> result = context.fn(...args);</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obj2</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a, b);</span><br><span class="line">&#125;</span><br><span class="line">obj2.myCall(obj, <span class="number">2</span>) <span class="comment">// 1 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span>;</span><br><span class="line">  context.fn = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    args.push(<span class="string">&#x27;arguments[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">&#x27;context.fn(&#x27;</span> + args + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obj2</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a, b);</span><br><span class="line">&#125;</span><br><span class="line">obj2.myCall(obj, <span class="number">2</span>) <span class="comment">// 1 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params">context, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> context = <span class="built_in">Object</span>(context) || <span class="built_in">window</span>;</span><br><span class="line">  context.fn = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">    result = context.fn();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">      args.push(<span class="string">&#x27;arr[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">&#x27;context.fn(&#x27;</span> + args + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="function"><span class="keyword">function</span> (<span class="params">b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a, b, c);</span><br><span class="line">&#125;</span><br><span class="line">obj2.myApply(obj, [<span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// 1 2 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> context = <span class="built_in">Object</span>(context) || <span class="built_in">window</span>;</span><br><span class="line">  context.fn = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    result = context.fn();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = context.fn(...arguments[<span class="number">1</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="function"><span class="keyword">function</span> (<span class="params">b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a, b, c);</span><br><span class="line">&#125;</span><br><span class="line">obj2.myApply(obj, [<span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> fNop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">  <span class="keyword">var</span> fBound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">return</span> self.apply(<span class="built_in">this</span> <span class="keyword">instanceof</span> fNop ? <span class="built_in">this</span> : context, args.concat(bindArgs))</span><br><span class="line">  &#125;</span><br><span class="line">  fNop.prototype = <span class="built_in">this</span>.prototype</span><br><span class="line">  fBound.prototype = <span class="keyword">new</span> fNop()</span><br><span class="line">  <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = fun.myBind(obj, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// obj2(3)  // 1 2 3</span></span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="keyword">new</span> obj2(<span class="number">3</span>) <span class="comment">// undefined 2 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(<span class="built_in">this</span> <span class="keyword">instanceof</span> Fn ? <span class="built_in">this</span> : context, args.concat(...arguments))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = fun.myBind(obj, <span class="number">2</span>)</span><br><span class="line">obj2(<span class="number">3</span>)  <span class="comment">// 1 2 3</span></span><br><span class="line"><span class="comment">// var obj3 = new obj2(3) // undefined 2 3</span></span><br></pre></td></tr></table></figure><h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><h2 id="promise-all"><a href="#promise-all" class="headerlink" title="promise.all"></a>promise.all</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promiseAll</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(promises)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;promises must be an array&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = []</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(promises[i]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        result[i] = res</span><br><span class="line">        count++</span><br><span class="line">        count === promises.length &amp;&amp; resolve(result)</span><br><span class="line">      &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>)</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">2</span>)</span><br><span class="line">  &#125;, <span class="number">200</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promiseAll([p2, p1]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// [2, 1]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="promise-finally"><a href="#promise-finally" class="headerlink" title="promise.finally"></a>promise.finally</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// finally 无论Promise最后状态如何，都会执行的操作</span></span><br><span class="line"><span class="comment">// finally 没有参数，会传递值</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.myFinally = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(cb()).then(<span class="function">() =&gt;</span> res)</span><br><span class="line">  &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(cb()).then(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">11</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">p1.myFinally(fun).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// 11 1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="promise-race"><a href="#promise-race" class="headerlink" title="promise.race"></a>promise.race</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PromiseRace</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(promises[i]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sleep函数模拟线程挂起，等待时间后恢复</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, time * <span class="number">1000</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> timeout(time)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h1 id="模板字符串解析"><a href="#模板字符串解析" class="headerlink" title="模板字符串解析"></a>模板字符串解析</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">template, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(\w+)\&#125;\&#125;/g</span></span><br><span class="line">  <span class="keyword">return</span> template.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">match, key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(match, key);</span></span><br><span class="line">    <span class="keyword">return</span> data[key]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ele = <span class="string">`我是&#123;&#123;name&#125;&#125;，性别&#123;&#123;sex&#125;&#125;，年龄&#123;&#123;age&#125;&#125;`</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">  sex: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  age: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(render(ele, obj));</span><br><span class="line"><span class="comment">// 我是tom，性别male，年龄10</span></span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">var</span> midNum = arr.splice(mid, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">var</span> left = []</span><br><span class="line">  <span class="keyword">var</span> right = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (midNum &gt; arr[i]) &#123;</span><br><span class="line">      left.push(arr[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> quickSort(left).concat(midNum, quickSort(right))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log(quickSort(arr)); <span class="comment">// [ 1, 3, 5, 6, 7, 9 ]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数组去重&quot;&gt;&lt;a href=&quot;#数组去重&quot; class=&quot;headerlink&quot; title=&quot;数组去重&quot;&gt;&lt;/a&gt;数组去重&lt;/h1&gt;&lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h</summary>
      
    
    
    
    <category term="js" scheme="http://maya1900.github.io/categories/js/"/>
    
    
    <category term="js" scheme="http://maya1900.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>再谈“三次握手”和“四次挥手”</title>
    <link href="http://maya1900.github.io/article/2022/net/"/>
    <id>http://maya1900.github.io/article/2022/net/</id>
    <published>2022-03-19T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-报文格式"><a href="#TCP-报文格式" class="headerlink" title="TCP 报文格式"></a>TCP 报文格式</h2><p><img src="https://cdn.jsdelivr.net/gh/maya1900/pic@master/img/202203201401374.png"></p><p>其中重要字段：</p><ul><li>序号(sequence number)：seq 序号，4 个字节。在一个 TCP 连接中传送的字节流的每一个字节都按顺序编号，seq 是本报文段的第一个字节的序号</li><li>确认号(acknowledgement number)：ack 序号，4 个字节。期望收到对方下一个报文段的第一个数据字节的序号，对方报文段最后一个字节序号加 1</li><li>标志位(flags)：0 或 1<ul><li>确认(ACK)：ACK=1 时确认号才有效；</li><li>同步(SYN)：SYN=1 表示这是一个连接请求或连接接受报文</li><li>终止(FIN)：FIN 释放连接，FIN=1 表明数据发送完毕，要求释放运输连接</li></ul></li></ul><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><img src="https://cdn.jsdelivr.net/gh/maya1900/pic@master/img/202203201426392.gif"></p><ol><li>客户端向服务器发送报文，标志位为 SYN，序号 seq=x，客户端进入 syn-sent 状态；</li><li>服务器收到并返回报文，标志位 SYN 和 ACK，序号 seq=y，确认号 ack=x+1，服务器进入 syn-rcvd 状态；</li><li>客户端收到并返回报文，标志位 ACK，序号 seq=x+1 即服务器的 ack，确认号 ack=y+1，客户端进入 established 状态，服务器收到报文后也进入 established 状态。</li></ol><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p><img src="https://cdn.jsdelivr.net/gh/maya1900/pic@master/img/202203201441531.gif"></p><ol><li>客户端向服务器发送报文，标志位 FIN，序号 seq=u，客户端进入 fin-wait-1 状态；</li><li>服务器收到报文进入 close-wait 状态并返回报文，标志位 ACK，序号 seq=y，确认号 ack=u+1；客户端收到报文进入 fin-wait-2 状态；</li><li>服务器做好了释放准备发送报文，标志位 FIN 和 ACK，序号 seq=w，确认号 ack=u+1，服务器进入 last-ack 状态；</li><li>客户端收到报文进入 time-wait 状态并返回报文，标志位 ACK，序号 seq=u+1，确认号 ack=w+1，客户端随后等待 2MSL；服务器收到报文进入 closed 状态，客户端等待完 2MSL 后进入 closed 状态</li></ol><h2 id="为什么是-3-次握手不是-2-次或-4-次？"><a href="#为什么是-3-次握手不是-2-次或-4-次？" class="headerlink" title="为什么是 3 次握手不是 2 次或 4 次？"></a>为什么是 3 次握手不是 2 次或 4 次？</h2><p>2 次的问题：A 向 B 发送请求报文，B 收到回复 A 确认报文，但 B 无法确定 A 是否收到报文，A 也无法确定 B 是否收到请求报文(B 的确认报文可能丢失)，造成死锁，；</p><p>4 次问题：A 向 B 发送请求报文，B 回复 A 确认报文，B 再向 A 发送请求报文，A 向 B 发送确认报文，其中 2、3 步可以合并提高连接速度</p><h2 id="3-次握手中途请求失败怎么办？"><a href="#3-次握手中途请求失败怎么办？" class="headerlink" title="3 次握手中途请求失败怎么办？"></a>3 次握手中途请求失败怎么办？</h2><ul><li>第一次发送 SYN 给服务器失败<ul><li>客户端会周期性重传，直到服务器收到</li></ul></li><li>第二次发送 SYN+ACK 失败<ul><li>服务器会周期性重传，直到客户端确认</li></ul></li><li>第三次发送 ACK 失败<ul><li>客户端单方面认为连接成功，此时：<ul><li>a. 如果一直没有数据发送，服务器会周期性重传 SYN+ACK，直到客户端发送 ACK 成功(TCP 不会为没有数据的 ACK 超时重传)</li><li>b. 如果客户端有数据发送，服务器收到 data+ACK，自然会切换到连接状态，接受客户端的 data</li><li>c. 如果服务器有数据发送，数据发送不了(因为服务器状态还不是连接成功状态)，服务器会周期性重传 SYN+ACK，直到客户端确认。</li></ul></li></ul></li></ul><h2 id="为什么-tcp-连接的时候是三次，断开的时候却是四次？"><a href="#为什么-tcp-连接的时候是三次，断开的时候却是四次？" class="headerlink" title="为什么 tcp 连接的时候是三次，断开的时候却是四次？"></a>为什么 tcp 连接的时候是三次，断开的时候却是四次？</h2><p>因为在连接的时候，服务器收到客户端的 SYN 请求时，可以直接发送 SYN+ACK，ACK 用来应答的，SYN 用来同步的；<br>但是在断开时，服务器收到客户端的 FIN 请求时，可能服务器还没向客户端发送完数据，只能先发送个 ACK，表示知道了，等服务器所有报文都发送完了，再向客户端发送 FIN+ACK，表示可以结束了</p><h2 id="为什么客户端在结束后还要等-2MSL-最大报文段生存时间-才能到-closed-状态？"><a href="#为什么客户端在结束后还要等-2MSL-最大报文段生存时间-才能到-closed-状态？" class="headerlink" title="为什么客户端在结束后还要等 2MSL(最大报文段生存时间)才能到 closed 状态？"></a>为什么客户端在结束后还要等 2MSL(最大报文段生存时间)才能到 closed 状态？</h2><p>客户端需要判断最后的一个 ACK 服务器是否成功接收，2MSL 就是一个发送和一个回复所需的最大时间，如果最后的 ACK 丢失，服务器会向客户端继续发送 FIN+ACK 报文，客户端重发 ACK 并再次等待 2MSL，如果直到 2MSL，客户端都没有收到 FIN，客户顿则认为服务器已经收到 ACK，则结束 TCP 连接。</p><h2 id="如果已经建立连接，客户端发生故障怎么办？"><a href="#如果已经建立连接，客户端发生故障怎么办？" class="headerlink" title="如果已经建立连接，客户端发生故障怎么办？"></a>如果已经建立连接，客户端发生故障怎么办？</h2><p>TCP 设有一个保活计时器，时间通常是 2 个小时，如果 2 小时内都没有收到客户端的任何数据，服务器会发送一个探测报文段，以后每隔 75s 发送一次，连发 10 次仍然没有回应，服务器认为客户端故障，则断开连接。</p><h2 id="ISN-是什么？"><a href="#ISN-是什么？" class="headerlink" title="ISN 是什么？"></a>ISN 是什么？</h2><p>initial sequence number，初始序列号。发送方的字节数据编号的原点</p><h2 id="握手的第三次可以携带数据吗？"><a href="#握手的第三次可以携带数据吗？" class="headerlink" title="握手的第三次可以携带数据吗？"></a>握手的第三次可以携带数据吗？</h2><p>可以。能够发出第三次握手的用户应该是合法的用户，尽管服务器的状态还不是 established，但在收到第三次握手瞬间状态变为成功，数据可以成功接收。</p><h2 id="ACK-标志位可以单独承担消息传递的任务吗？"><a href="#ACK-标志位可以单独承担消息传递的任务吗？" class="headerlink" title="ACK 标志位可以单独承担消息传递的任务吗？"></a>ACK 标志位可以单独承担消息传递的任务吗？</h2><p>不行！需要 ack number 配合，如果成功接收 ack number，则表明前面发送的数据已经被成功接收。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TCP-报文格式&quot;&gt;&lt;a href=&quot;#TCP-报文格式&quot; class=&quot;headerlink&quot; title=&quot;TCP 报文格式&quot;&gt;&lt;/a&gt;TCP 报文格式&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/maya1900</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://maya1900.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="http://maya1900.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>浏览器垃圾回收机制</title>
    <link href="http://maya1900.github.io/article/2022/garbage/"/>
    <id>http://maya1900.github.io/article/2022/garbage/</id>
    <published>2022-03-07T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器垃圾回收机制"><a href="#浏览器垃圾回收机制" class="headerlink" title="浏览器垃圾回收机制"></a>浏览器垃圾回收机制</h1><h2 id="GC是什么"><a href="#GC是什么" class="headerlink" title="GC是什么"></a>GC是什么</h2><p>GC: Garbage Collection</p><h2 id="垃圾产生-amp-amp-回收"><a href="#垃圾产生-amp-amp-回收" class="headerlink" title="垃圾产生 &amp;&amp; 回收"></a>垃圾产生 &amp;&amp; 回收</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123; <span class="attr">name</span>: <span class="string">&#x27;炼狱先生&#x27;</span> &#125;</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><code>&#123; name: &#39;炼狱先生&#39; &#125;</code> 保存在堆内存中，当a被重新赋值数组<code>[1,2,3]</code>，那么它的引用关系就没有了，即变成了垃圾。</p><p>栈内存所存的基础数据类型大小是固定的，有操作系统自动分配和释放的；堆内存所存数据大小不固定，系统无法自动释放，需要js引擎手动释放</p><h2 id="常见的垃圾回收策略"><a href="#常见的垃圾回收策略" class="headerlink" title="常见的垃圾回收策略"></a>常见的垃圾回收策略</h2><p>常见的两种：标记清除和引用计数</p><h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>执行gc时，递归遍历所有的对象，对可达对象进行标记，不可达对象当成垃圾回收。</p><p>类似：</p><ol><li>垃圾收集器在运行时给内存的所有变量加上一个标记，假设所有对象都是垃圾，全标记0；</li><li>然后从跟对象开始遍历，把不是垃圾的节点改成1；</li><li>结束后清理所有标记为0的垃圾，销毁回收他们锁占用的空间；</li><li>最后，把所有对象修改为0，等待下一轮垃圾回收</li></ol><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>就是判断一个对象的引用数，引用数为0就回收，大于0就不回收。</p><p>步骤：</p><ol><li>当声明了一个变量并将一个引用对象赋值给该变量时，这个值的引用次数为1；</li><li>这个值又赋给另一个变量，那么引用次数加1；</li><li>该变量的值被其他值覆盖了，一个引用对象引用次数减1；</li><li>当这个值引用次数为0，说明没有被引用了，就被回收。</li></ol><ul><li>缺点：出现循环引用，导致引用一直存在。</li></ul><h2 id="V8的垃圾回收算法"><a href="#V8的垃圾回收算法" class="headerlink" title="V8的垃圾回收算法"></a>V8的垃圾回收算法</h2><h3 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h3><p>V8将堆分为两个空间，一个叫新生代，一个叫老生代，新生代存放小的、存活周期短的对象。它只有1-8M的容量；老生代存放大的、存活周期长的对象。</p><p>V8使用不同的垃圾回收器和不同的回收算法：</p><ul><li>副垃圾回收器 + Scavenge算法：负责新生代</li><li>主垃圾回收器 + Mark-Sweep(标记清除) + Mark-Compact(标记整理)：老生代</li></ul><h4 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h4><h5 id="Scavange算法"><a href="#Scavange算法" class="headerlink" title="Scavange算法"></a>Scavange算法</h5><p>Scavange算法将新生代堆分为两部分，分别叫from-space和to-space，新分配的对象被放入from-space，from-space占满时，gc就启动了，标记活动对象和非活动对象，复制from-space的活动对象到to-space并排序，清除from-space中的非活动对象，最后将from-space和to-space进行角色互换，以便下一次的回收。</p><p>新生代对象晋升到老生代对象的两种情况：</p><ul><li>一个对象经过多次复制依然存活；</li><li>复制一个对象到to-space时，占用超过25%</li></ul><h4 id="老生代"><a href="#老生代" class="headerlink" title="老生代"></a>老生代</h4><p>老生代为什么不用Scavenge算法：</p><ul><li>反复复制存活率高的对象，效率低；</li><li>老生代内存空间大，使用以空间换时间，空间非常浪费</li></ul><h5 id="Mark-Sweep-标记清理"><a href="#Mark-Sweep-标记清理" class="headerlink" title="Mark-Sweep(标记清理)"></a>Mark-Sweep(标记清理)</h5><ul><li>标记阶段：对老生代对象进行第一次扫描，对活动对象进行标记；</li><li>清理阶段：对老生代对象进行第二次扫描，清除未标记的对象，即非活动对象。</li></ul><p>清除非活动对象后，留下了零零散散的空位。</p><h5 id="Marck-Compact-标记整理"><a href="#Marck-Compact-标记整理" class="headerlink" title="Marck-Compact(标记整理)"></a>Marck-Compact(标记整理)</h5><p>即在标记清理结束后，把剩下的活动对象整理到内存的一侧，整理完成后，直接回收边界的内存。</p><h3 id="全停顿问题"><a href="#全停顿问题" class="headerlink" title="全停顿问题"></a>全停顿问题</h3><p>js是一个单线程，代码运行需要用到js引擎，垃圾回收也需要用到js引擎，冲突了怎么办？<strong>垃圾回收优先于代码执行</strong>，会先停止代码的运行，等到垃圾回收完毕，再执行js代码，这个过程被称为全停顿。</p><p>新生代空间小，配合算法停顿时间短；但老生代某些时候对象较多，停顿时间长，使得页面出现了卡顿现象。</p><h3 id="增量标记"><a href="#增量标记" class="headerlink" title="增量标记"></a>增量标记</h3><p>就是将一次GC标记的过程，分成了很多小步，执行一小步再执行应用逻辑，交替多次完成一轮GC标记</p><p>增量标记后，每次暂停后如何恢复标记？如果执行程序时标记的对象被修改了怎么处理？对应引入了三色标记法与写屏障法</p><h3 id="三色标记法"><a href="#三色标记法" class="headerlink" title="三色标记法"></a>三色标记法</h3><p>三色标记法即使用两个标记位和一个标记工作表来实现标记。</p><p>最初所有对象都被标记白色，从一组根对象开始，将这组对象标记为灰色并推入标记工作表中，当回收器从工作表中弹出并访问他的引用对象时，自身由灰色转变为黑色，并将下一个引用对象转为灰色，直到没有可标记为灰色的对象了，那么剩下的所有白色都是无法到达的，即需要回收的。</p><h3 id="写屏障法"><a href="#写屏障法" class="headerlink" title="写屏障法"></a>写屏障法</h3><p>写屏障：增量中修改引用。<br>如果在增量标记时，第一次对象被引用，而后代码执行时修改了他的引用，那么第二次增量时会将被引用的新对象强制由白色对象改为灰色，从而保证下一次会被正确标记，又叫强三色不变性。</p><h3 id="惰性清理"><a href="#惰性清理" class="headerlink" title="惰性清理"></a>惰性清理</h3><p>增量标记完成后，接着就是清除阶段了。但如果当前可用内存足够让代码执行，gc就选择了延迟清理，或者只清理部分，让js代码先执行，这个优化叫做惰性清理。</p><h3 id="并发回收"><a href="#并发回收" class="headerlink" title="并发回收"></a>并发回收</h3><p>在执行javascript的过程中，由辅助线程在后台完成执行垃圾回收的操作。主线程和辅助线程同时进行。</p><h3 id="并行回收"><a href="#并行回收" class="headerlink" title="并行回收"></a>并行回收</h3><p>并行GC：主线程和辅助线程同时执行同样的GC工作，由辅助线程来分担主线程的GC工作。</p><h2 id="V8当前的垃圾回收机制"><a href="#V8当前的垃圾回收机制" class="headerlink" title="V8当前的垃圾回收机制"></a>V8当前的垃圾回收机制</h2><ul><li>2011年，V8应用增量标记机制；</li><li>2018年，Chrome64和Nodejs启动并发标记，同时添加并行技术。</li></ul><p>这几种技术在垃圾回收时融合使用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://wenku.baidu.com/view/4039c64b3f1ec5da50e2524de518964bcf84d200.html">浏览器的垃圾回收机制</a></li><li><a href="https://juejin.cn/post/6981588276356317214">你真的了解垃圾回收机制吗</a></li><li><a href="https://juejin.cn/post/6995706341041897486">赠你13张图，助你20分钟打败了「V8垃圾回收机制」</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浏览器垃圾回收机制&quot;&gt;&lt;a href=&quot;#浏览器垃圾回收机制&quot; class=&quot;headerlink&quot; title=&quot;浏览器垃圾回收机制&quot;&gt;&lt;/a&gt;浏览器垃圾回收机制&lt;/h1&gt;&lt;h2 id=&quot;GC是什么&quot;&gt;&lt;a href=&quot;#GC是什么&quot; class=&quot;header</summary>
      
    
    
    
    <category term="前端" scheme="http://maya1900.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="浏览器" scheme="http://maya1900.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js最全知识点整理</title>
    <link href="http://maya1900.github.io/article/2022/vue-know/"/>
    <id>http://maya1900.github.io/article/2022/vue-know/</id>
    <published>2022-03-06T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/maya1900/pic@master/img/202203082053322.png"></p><p>链接：<a href="https://pan.baidu.com/s/1yAMG2YG9BNK6nTq5mOsi-Q?pwd=mpi2">https://pan.baidu.com/s/1yAMG2YG9BNK6nTq5mOsi-Q?pwd=mpi2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/maya1900/pic@master/img/202203082053322.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/1yAMG2YG9B</summary>
      
    
    
    
    <category term="前端" scheme="http://maya1900.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="http://maya1900.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>再次深入git</title>
    <link href="http://maya1900.github.io/article/2022/git/"/>
    <id>http://maya1900.github.io/article/2022/git/</id>
    <published>2022-01-23T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>git branch 创建分支</p><p>git checkout 切换分支</p><p>git checkout -b 创建并切换到分支</p><p>git merge 合并分支：产生一个新提交</p><p>在master下合并bugFix, 使用git merge bugFix，此时master向上指向了两条提交记录，在使用git merge bugFix，此时bugFix和master处在了同一位置。</p><p>git rebase 合并分支：取出所有提交记录，在另外一个地方放下去</p><p>在bugFix分支，git rebase master，然后更新，切回master，git rebase bugFix，master和bugFix就处在了同一位置。</p><h2 id="分离HEAD"><a href="#分离HEAD" class="headerlink" title="分离HEAD"></a>分离HEAD</h2><p>HEAD：当前记录检出的符号引用</p><p>直接使用git checkout (提交记录的哈希)，可以分离HEAD</p><p>git checkout HEAD^ 向上移动1个提交记录</p><p>git checkoutHEAD~3 向上移动3个提交记录</p><h2 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h2><p>git reset 使用git reset HEAD~1，回退到上个提交（修改的内容加入了暂存区）</p><p>git revert 使用git revert HEAD，追加了一个新提交，更改就是撤销上个提交，此时新提交和上上个提交相同</p><h2 id="自由移动提交"><a href="#自由移动提交" class="headerlink" title="自由移动提交"></a>自由移动提交</h2><p>git cherry-pick (提交记录哈希，可多个)，可以将任意提交记录添加到本分支</p><p>配合git reflog可以恢复已经reset的提交。</p><p>git rebase -i HEAD~4 交互式移动。</p><h2 id="git打标签"><a href="#git打标签" class="headerlink" title="git打标签"></a>git打标签</h2><p>为commit做一个永久标记：</p><p>git tag [tagName] [commit] 为某个记录打标签，不写commit为当前commit</p><p>git push origin [tagName]  标签推送远程</p><p>git show [tagName] 查看某个标签 </p><p>git tag -l 查看所有标签</p><p>git tag -d [tagName] 删除标签</p><p>git describe 描述某个记录的标签</p><h2 id="多分支rebase"><a href="#多分支rebase" class="headerlink" title="多分支rebase"></a>多分支rebase</h2><p>git rebase [branch1] [branch2] 把branch1合并到branch2上来</p><p>git checkout master^ 回到master上一条记录</p><p>git checkout master^2 回到master另外上一条(如果有)</p><p>支持链式操作：</p><p>git checkout HEAD<del>;git checkout HEAD^2;git checkout HEAD</del>2</p><p>=== git checkout HEAD<del>^2</del>2</p><p>git brance [branch] [commit] 在commit位置新建分支</p><p>git branch -f [commit1] [commit2] 移动commit1到commit2</p><h2 id="远程相关"><a href="#远程相关" class="headerlink" title="远程相关"></a>远程相关</h2><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>在本地创建一个远程的拷贝</p><p>git fetch 从远程获取数据，不会改变本地的状态，不会更新master分支，也不会修改磁盘上的文件。</p><p>git pull == git fetch + git merge</p><p>git pull –rebase == git fetch + git rebase</p><h3 id="任意分支跟踪origin-master"><a href="#任意分支跟踪origin-master" class="headerlink" title="任意分支跟踪origin/master"></a>任意分支跟踪origin/master</h3><p>git checkout -b [branch] origin/master</p><p>git branch -u origin/master [branch]</p><h3 id="git-push参数"><a href="#git-push参数" class="headerlink" title="git push参数"></a>git push参数</h3><p>git push origin master</p><p>获取提交推送到远程master</p><p>git push origin master:[branch] </p><p>推送本地分支branch到远程master</p><h3 id="git-fetch参数"><a href="#git-fetch参数" class="headerlink" title="git fetch参数"></a>git fetch参数</h3><p>git fetch origin foo</p><p>获取远程foo分支，并下载</p><p>git fetch orgin source:descprtion</p><p>下载远程source分支到本地descrption，与pugh相反</p><h3 id="不指定source"><a href="#不指定source" class="headerlink" title="不指定source"></a>不指定source</h3><p>git push orgin :side：push空source删除远程side分支</p><p>git fetch origin :bugFix：fetch空source会在本地创建一个新分支</p><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p>git pull origin master:foo == git fetch origin master:foo + git merge foo</p><p>学习自：</p><p><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Branching</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;git-commit&quot;&gt;&lt;a href=&quot;#git-commit&quot; class=&quot;headerlink&quot; title=&quot;git commit&quot;&gt;&lt;/a&gt;git commit&lt;/h2&gt;&lt;p&gt;git branch 创建分支&lt;/p&gt;
&lt;p&gt;git checkout 切换</summary>
      
    
    
    
    <category term="前端" scheme="http://maya1900.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="git" scheme="http://maya1900.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>idea2021.3最新激活方法</title>
    <link href="http://maya1900.github.io/article/2022/ideaactive/"/>
    <id>http://maya1900.github.io/article/2022/ideaactive/</id>
    <published>2022-01-05T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://imgtu.com/i/TvXjwF"><img src="https://s4.ax1x.com/2022/01/06/TvXjwF.png" alt="TvXjwF.png"></a></p><p>这次也是发现的一个宝藏，idea安装好后只需双击就可激活成功，无需其他多余操作！</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1AIkgeteEjlkWDv0VoFIV5A">https://pan.baidu.com/s/1AIkgeteEjlkWDv0VoFIV5A</a><br>提取码：1pys</p></blockquote><h4 id="操作方法："><a href="#操作方法：" class="headerlink" title="操作方法："></a>操作方法：</h4><p>下载解压文件，把文件放到合适位置，进入script目录，双击install-all-users.vbs 或者 install-current-user.vbs，点确定后继续等待一个done的弹出框，出来后就代表激活完成了。</p><p>插件更新关注：<a href="https://zhile.io/">https://zhile.io/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/TvXjwF&quot;&gt;&lt;img src=&quot;https://s4.ax1x.com/2022/01/06/TvXjwF.png&quot; alt=&quot;TvXjwF.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这次也是发现的一个宝藏，idea安装</summary>
      
    
    
    
    <category term="其他" scheme="http://maya1900.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="idea" scheme="http://maya1900.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>重学React</title>
    <link href="http://maya1900.github.io/article/202112/review-react/"/>
    <id>http://maya1900.github.io/article/202112/review-react/</id>
    <published>2021-12-30T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重学React"><a href="#重学React" class="headerlink" title="重学React"></a>重学React</h1><h2 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1. 创建虚拟dom</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> VDOM = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 2. 渲染</span></span></span><br><span class="line"><span class="javascript">  ReactDOM.render(VDOM, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jsx基础语法"><a href="#jsx基础语法" class="headerlink" title="jsx基础语法"></a>jsx基础语法</h3><ol><li><p>定义虚拟dom不能使用”“</p></li><li><p>标签中混入js表达式使用{}</p></li><li><p>样式类名使用className</p></li><li><p>内联样式使用双大括号包裹</p><blockquote><p>js表达式与js语句：</p><p>表达式返回一个值，如a a+b fun() arr.map() function fun(){};</p><p>语句是js代码，不会返回值，如if(){} while(){} for(){} switch(){}</p></blockquote></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> VDOM = (</span><br><span class="line">  &lt;h1 id=&#123;myid.toUpperCase()&#125;&gt;</span><br><span class="line">    &lt;span className=<span class="string">&quot;aa&quot;</span> style=&#123;&#123;<span class="attr">color</span>:<span class="string">&#x27;#000&#x27;</span>&#125;&#125;&gt;标题&lt;/span&gt;</span><br><span class="line">  &lt;/h1&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><blockquote><p>组件名称必须以大写字母开头</p></blockquote><h4 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">  <span class="comment">// 1. 创建函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello, &#123;props.name&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 渲染</span></span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;aa&quot;</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="Class组件"><a href="#Class组件" class="headerlink" title="Class组件"></a>Class组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Welcome,&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件三大属性"><a href="#组件三大属性" class="headerlink" title="组件三大属性"></a>组件三大属性</h3><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Con</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(props);</span><br><span class="line">      <span class="built_in">this</span>.state = &#123;<span class="attr">isHot</span>: <span class="literal">true</span>&#125;</span><br><span class="line">      <span class="built_in">this</span>.dem1 = <span class="built_in">this</span>.dem.bind(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">dem</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.dem1&#125;</span>&gt;</span>天气&#123;this.state.isHot ? &#x27;火热&#x27; : &#x27;凉爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Con</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>构造函数需要传递一个props参数</li><li>关注this，所有方法都是严格模式，直接调用this就为undefined</li><li>改变state需要用setState，修改state部分属性是合并不是覆盖</li><li>this.setState()，接收两种参数：<ol><li>setState(stateChange, [callback]) // callback可选回调，在render后调用</li><li>setState(updater, [callback]) // updater为返回state对象的函数，可以接收state和props参数</li></ol></li></ol><p><strong>React控制之外的事件调用setState是同步更新，如原生事件setTimeout/setInterval；大部分开发用到的React封装的事件，如onChange/onClick，setState是异步处理的</strong></p><p><strong>同步更新一个setState调用一次render，异步更新多个setState统一调用一次render</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Con</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// state直接赋值</span></span><br><span class="line">    state = &#123;<span class="attr">isHost</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">    <span class="comment">// 使用箭头函数</span></span><br><span class="line">    dem = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> isHot = <span class="built_in">this</span>.state.isHot</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.dem&#125;</span>&gt;</span>天气&#123;this.state.isHot ? &#x27;火热&#x27; : &#x27;凉爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Con</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>调用方法传递参数，有两种方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> this.deleteRow(id, e)&#125;&gt;Delete Row<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.deleteRow.bind(this,</span> <span class="attr">id</span>)&#125;&gt;</span>Delete Row<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p>props主要用来传递数据</p><p>基本使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Con</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;&#123;<span class="built_in">this</span>.props.name&#125;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;&#123;<span class="built_in">this</span>.props.age&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Con</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">age</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>对象使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Con</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;&#123;<span class="built_in">this</span>.props.name&#125;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;&#123;<span class="built_in">this</span>.props.age&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> p = &#123;<span class="attr">name</span>: <span class="string">&#x27;jerry&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line">  <span class="comment">// 使用展开运算符</span></span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Con</span> &#123;<span class="attr">...p</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>props限制：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Con</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&#123;<span class="built_in">this</span>.props.name&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&#123;<span class="built_in">this</span>.props.age&#125;&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对属性进行限制</span></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    name: PropTypes.string.isRequired,</span><br><span class="line">    age: PropTypes.number,</span><br><span class="line">    fun: PropTypes.func</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 默认值</span></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    sex: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数式组件的使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作为参数传递：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&#123;props.name&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&#123;props.age&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&#123;props.sex&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h4><ol><li><p>字符串形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> ref=<span class="string">&quot;input&quot;</span> onBlur=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.inputBlur()&#125;/&gt;</span><br><span class="line"><span class="function"><span class="title">inputBlur</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.refs.input.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>回调形式</p><p>在ref属性中添加一个回调，将dom作为参数传递，c是该input标签，把元素赋值实例对象一个属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;<span class="function"><span class="params">c</span> =&gt;</span> <span class="built_in">this</span>.input = c&#125; onBlur=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.inputBlur()&#125;/&gt;</span><br><span class="line"><span class="function"><span class="title">inputBlur</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.input.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>api形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MyRef = React.createRef()</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;<span class="built_in">this</span>.MyRef&#125; onBlur=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.inputBlur()&#125;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">inputBlur</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.MyRef.current.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>尽可能使用操作元素事件替代，少用ref</strong></p><h3 id="react事件"><a href="#react事件" class="headerlink" title="react事件"></a>react事件</h3><p>react事件通过onXXX属性指定属性处理函数，通过事件委托方式处理，事件中返回函数，通过event.target得到发生事件的dom元素对象</p><h3 id="受控与非受控组件"><a href="#受控与非受控组件" class="headerlink" title="受控与非受控组件"></a>受控与非受控组件</h3><p>受控组件state是”唯一数据源”；</p><p>非受控组件数据不会更新state，数据用作展示，输入数据现用现取</p><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><ol><li>函数的参数是函数</li><li>函数的返回值是一个函数</li></ol><h3 id="函数的柯里化"><a href="#函数的柯里化" class="headerlink" title="函数的柯里化"></a>函数的柯里化</h3><p>通过函数调用继续返回函数的形式，实现多次接收参数最后统一处理的函数编码形式</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="旧"><a href="#旧" class="headerlink" title="旧"></a>旧</h4><ol><li><p>初始化阶段，由ReactDom.render()触发</p><p>i. constructor()</p><p>ii. componentWillMount()</p><p>iii. render()</p><p>iv. componentDidMount()</p></li><li><p>更新阶段，由this.setState()触发</p><p>i. shouldComponentUpdate()  // 返回true/false判断是否更新</p><p>ii. componentWillUpdate()</p><p>iii. render()</p><p>(iv. componentWillReceiveProps) // 父组件更新，子组件先执行(第一次传递数据不执行)</p><p>iv. componentDidUpdate()</p></li><li><p>卸载组件，由ReactDOM.unmountComponentAtNode()触发</p><p>i. componentWillUnmount()</p></li></ol><h4 id="新"><a href="#新" class="headerlink" title="新"></a>新</h4><p>抛弃componentWillMount/componentWillReceiveProps/componentWillUpdate</p><ol><li><p>初始化阶段，由ReactDOM.render()触发</p><p>i. constructor()</p><p>ii. getDerivedStateFromProps  // 必须static 传参(props,state)，返回Null或state对象</p><p>iii. render()</p><p>iv. componentDidMount()</p></li><li><p>更新阶段，由this.setState()或父组件重新render触发</p><p>i. getDerivedStateFromProps</p><p>ii. shouldComponentUpdate()</p><p>iii. render()</p><p>iv. getSnapshotBeforeUpdate // 传参(prevProps, prevState) ，任何返回值传给v阶段</p><p>v. componentDidUpdate()  // 传参(prevProps, prevState, snapshot)</p></li><li><p>卸载组件， 由ReactDOM.unmountComponentAtNode()触发</p><p>i. componentWillUnmount()</p></li></ol><h3 id="react-跨域"><a href="#react-跨域" class="headerlink" title="react 跨域"></a>react 跨域</h3><ul><li><p>方法一</p><p>在package.json中配置：<code>&quot;proxy&quot;: &quot;http://localhost:5000&quot;</code></p></li><li><p>方法二</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;proxy&quot;: &#123;</span><br><span class="line">    &quot;/api&quot;: &#123;</span><br><span class="line">        &quot;target&quot;: &quot;http://localhost:8000&quot;,</span><br><span class="line">        &quot;changeOrigin&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;/app&quot;: &#123;</span><br><span class="line">        &quot;target&quot;: &quot;http://localhost:8001&quot;,</span><br><span class="line">        &quot;changeOrigin&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法三</p><p>创建src/setupProxy.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">    app.use(</span><br><span class="line">    proxy(<span class="string">&#x27;/api&#x27;</span>,&#123;</span><br><span class="line">            target: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">            changeOrigin: <span class="literal">true</span>,</span><br><span class="line">            pathRewrite: &#123;</span><br><span class="line">                <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/hello&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br><span class="line">v5:</span><br><span class="line"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Hello&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span><br><span class="line">v6:</span><br><span class="line"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span><br><span class="line">    &lt;Route path=&quot;/hello&quot; element=&#123;&lt;Hello/&gt;&#125; /&gt;</span><br><span class="line">    &lt;Route path=&quot;/about&quot; element=&#123;&lt;About/&gt;&#125; /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span><br><span class="line">App外包裹：</span><br><span class="line"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="路由组件与一般组件："><a href="#路由组件与一般组件：" class="headerlink" title="路由组件与一般组件："></a>路由组件与一般组件：</h3><ol><li>写法不一样：</li><li>存放位置不一样：一般组件components，路由组件pages</li><li>路由组件接收到固定三个属性history,location,match</li></ol><h3 id="NavLink封装："><a href="#NavLink封装：" class="headerlink" title="NavLink封装："></a>NavLink封装：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> // 通过&#123;...对象&#125;的形式解析对象，相当于将对象中的属性全部展开</span><br><span class="line"> //<span class="tag">&lt;<span class="name">NavLink</span>  <span class="attr">to</span> = <span class="string">&#123;this.props.to&#125;</span> <span class="attr">children</span> = <span class="string">&#123;this.props.children&#125;/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> &#123;<span class="attr">...this.props</span>&#125;/&gt;</span></span><br><span class="line">使用：</span><br><span class="line">&#123;/*将NavLink进行封装，成为MyNavLink,通过props进行传参数，标签体内容props是特殊的一个属性，叫做children */&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span> = <span class="string">&quot;/about&quot;</span> &gt;</span>About<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="嵌套路由："><a href="#嵌套路由：" class="headerlink" title="嵌套路由："></a>嵌套路由：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">v6:</span><br><span class="line">父：</span><br><span class="line">&lt;Route path=&quot;/about/*&quot; element=&#123;&lt;About/&gt;&#125; /&gt;</span><br><span class="line">子：</span><br><span class="line"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;message&quot;</span>&gt;</span>message<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><br><span class="line">&lt;Route path=&quot;message&quot; element=&#123;&lt;Message/&gt;&#125;/&gt;</span><br><span class="line">页面：http://localhost:3000/about/message</span><br><span class="line">v5:</span><br><span class="line">父：</span><br><span class="line"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span><br><span class="line">子：</span><br><span class="line">let &#123;path, url&#125; = useRouteMatch()</span><br><span class="line"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">url</span>&#125;/<span class="attr">message</span>`&#125;&gt;</span>message<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><br><span class="line">&lt;Route path=&#123;`$&#123;path&#125;/message`&#125; component=&#123;&lt;Message/&gt;&#125;/&gt;</span><br></pre></td></tr></table></figure><p>其他参考：<a href="%5B(19%E6%9D%A1%E6%B6%88%E6%81%AF">react-router v6迁移指南</a> React-Router v6 新特性解读及迁移指南_前端劝退师-CSDN博客_react router v6](<a href="https://blog.csdn.net/weixin_40906515/article/details/104957712">https://blog.csdn.net/weixin_40906515/article/details/104957712</a>))</p><h3 id="向路由组件传递参数"><a href="#向路由组件传递参数" class="headerlink" title="向路由组件传递参数"></a>向路由组件传递参数</h3><ul><li><p>params</p><ol><li>路由链接：<code>&lt;Link to=&#39;/demo/test/tom/18&#39;&#125;&gt;详情&lt;/Link&gt;</code></li><li>注册路由：<code>&lt;Route path=&quot;/demo/test/:name/:age&quot; component=&#123;Test&#125;/&gt;</code></li><li>接收参数：this.props.match.params</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------发送参数:父组件----------------------------------------------</span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;/* 向路由组件传递params参数 */&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>/$&#123;<span class="attr">msgObj.id</span>&#125;/$&#123;<span class="attr">msgObj.title</span>&#125;`&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">      &#123;/* 声明接收params参数 */&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail/:id/:title&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> --------------------------------接受参数:子组件-----------------------------------------------------------</span><br><span class="line">   const &#123;id,title&#125; = this.props.match.params</span><br></pre></td></tr></table></figure></li><li><p>search</p><ol><li>路由链接：<code>&lt;Link to=&#39;/demo/test?name=tom&amp;age=18&#39;&#125;&gt;详情&lt;/Link&gt;</code></li><li>注册路由(无需声明)：<code>&lt;Route path=&quot;/demo/test&quot; component=&#123;Test&#125;/&gt;</code></li><li>接收参数：this.props.location.search</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------发送参数:父组件----------------------------------------------</span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     &#123;/* 向路由组件传递search参数 */&#125;</span><br><span class="line"> <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>/?<span class="attr">id</span>=<span class="string">$&#123;msgObj.id&#125;&amp;title</span>=<span class="string">$&#123;msgObj.title&#125;</span>`&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    &#123;/* search参数无需声明接收，正常注册路由即可 */&#125;</span><br><span class="line"> <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> --------------------------------接受参数:子组件-----------------------------------------------------------</span><br><span class="line"> import qs from &#x27;querystring&#x27;</span><br><span class="line"> // 接收search参数</span><br><span class="line"> const &#123;search&#125; = this.props.location</span><br><span class="line"> const &#123;id,title&#125; = qs.parse(search.slice(1))</span><br></pre></td></tr></table></figure></li><li><p>state</p><ol><li>路由链接：<code>&lt;Link to=&#123;&#123;pathname:'/demo/test',state:&#123;name:'tom',age:18&#125;&#125;&#125;&gt;详情&lt;/Link&gt;</code></li><li>注册路由(无需声明)：<code>&lt;Route path=&quot;/demo/test&quot; component=&#123;Test&#125;/&gt;</code></li><li>接收参数：this.props.location.state<ul><li>使用<code>BrowserRouter</code>刷新才可以<code>保留住参数</code>,使用<code>HashRouter</code>刷新后state将会没有<code>history</code>来保存参数</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------发送参数:父组件----------------------------------------------</span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     &#123;/* 向路由组件传递state参数 */&#125;</span><br><span class="line"> <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;pathname:</span>&#x27;/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>&#x27;,<span class="attr">state:</span>&#123;<span class="attr">id:msgObj.id</span>,<span class="attr">title:msgObj.title</span>&#125;&#125;&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    &#123;/* state参数无需声明接收，正常注册路由即可 */&#125;</span><br><span class="line"> <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> --------------------------------接受参数:子组件-----------------------------------------------------------</span><br><span class="line">   // 接收state参数,后面添加`||&#123;&#125;`是防止使用`HashRouter`后state为undefined时报错</span><br><span class="line"> const &#123;id,title&#125; = this.props.location.state || &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h3><p>v5借助this.props.history对象的api对路由跳转进行操作</p><ol><li>this.props.history.push()</li><li>this.props.history.replace()</li><li>this.props.history.goBack()</li><li>this.props.history.goForward()</li><li>this.props.history.go()</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> pushShow = <span class="function">(<span class="params">id, title</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">//push跳转+携带params参数</span></span><br><span class="line">   <span class="built_in">this</span>.props.history.push(<span class="string">`/home/message/detail/<span class="subst">$&#123;id&#125;</span>/<span class="subst">$&#123;title&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//push跳转+携带search参数</span></span><br><span class="line">   <span class="built_in">this</span>.props.history.push(<span class="string">`/home/message/detail?id=<span class="subst">$&#123;id&#125;</span>&amp;title=<span class="subst">$&#123;title&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//push跳转+携带state参数</span></span><br><span class="line">   <span class="built_in">this</span>.props.history.push(<span class="string">`/home/message/detail`</span>, &#123; id, title &#125;)</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.pushShow(msgObj.id, msgObj.title)&#125;&gt;push查看&lt;/button&gt;</span><br><span class="line">&#123;<span class="comment">/* 声明接收params参数 */</span>&#125;</span><br><span class="line">&#123;<span class="comment">/* &lt;Route path=&quot;/home/message/detail/:id/:title&quot; component=&#123;Detail&#125;/&gt; */</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">/* search参数无需声明接收，正常注册路由即可 */</span>&#125;</span><br><span class="line">&#123;<span class="comment">/* &lt;Route path=&quot;/home/message/detail&quot; component=&#123;Detail&#125;/&gt; */</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">/* state参数无需声明接收，正常注册路由即可 */</span>&#125;</span><br><span class="line">&lt;Route path=<span class="string">&quot;/home/message/detail&quot;</span> component=&#123;Detail&#125; /&gt;</span><br></pre></td></tr></table></figure><p>v6使用useNavigate进行编程式导航</p><h3 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h3><p>withRouter可以让一般组件须具备路由组件的属性<code>export default withRouter(Header)</code></p><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><p>中文文档：<a href="https://www.redux.org.cn/">Redux中文文档</a></p><h3 id="redux是什么"><a href="#redux是什么" class="headerlink" title="redux是什么"></a>redux是什么</h3><ol><li>redux是一个专门用于做<code>状态管理的JS库</code>(不是react插件库)。</li><li>它可以用在react, angular, vue等项目中, 但基本与react配合使用。</li><li>作用: 集中式管理react应用中多个组件<code>共享</code>的状态。</li></ol><p><a href="https://imgtu.com/i/TJfZRK"><img src="https://s4.ax1x.com/2021/12/24/TJfZRK.png" alt="TJfZRK.png"></a></p><h3 id="redux三个概念"><a href="#redux三个概念" class="headerlink" title="redux三个概念"></a>redux三个概念</h3><h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><p>动作的对象。</p><p>type: 标识属性，唯一，值为字符串</p><p>data: 数据属性，值任意</p><p>例子：<code>&#123; type: &#39;ADD_STUDENT&#39;,data:&#123;name: &#39;tom&#39;,age:18&#125; &#125;</code></p><h4 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h4><ol><li><p>用于初始化状态、加工状态。</p></li><li><p>加工时根据旧的state和action,产生新的state的纯函数</p></li><li><p>redux的reducer函数必须是一个纯函数</p><blockquote><p>纯函数：相同输入必定得到同样输出。</p><ol><li>不得改写参数数据</li><li>不会产生任何副作用，如网络请求、输入输出设备</li><li>不能调用Date.now()或Math.random()等不纯的方法</li></ol></blockquote></li></ol><h4 id="store"><a href="#store" class="headerlink" title="store"></a>store</h4><ol><li><p>将state、action、reducer联系在一起的对象</p></li><li><p>如何获得？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducers&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br></pre></td></tr></table></figure></li><li><p>对象的功能？</p><ul><li>getState()：得到state</li><li>dispatch(action)：分发action，触发reducer调用，产生新的state</li><li>subscribe(listencer)：注册监听，产生新的state时，自动调用</li></ul></li></ol><h3 id="redux的核心api"><a href="#redux的核心api" class="headerlink" title="redux的核心api"></a>redux的核心api</h3><ul><li>createstate()与applyMiddleware()</li></ul><p>createstore()：创建包含指定reducer的store对象</p><p>applyMiddleware()：应用基于redux的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))</span><br></pre></td></tr></table></figure><ul><li>store对象</li></ul><p>redux最核心的管理对象。</p><p>维护state,reducer</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ---------------------------store.js---------------------------------</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 该文件撰文用于暴露一个store对象,整个应用只有一个store对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//引入createStore,专门用于创建redux中最为核心的store对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore,applyMiddleware&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">//引入汇总后的reducer</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducers&#x27;</span></span><br><span class="line"><span class="comment">//引入redux-thunk，用于支持异步action</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"><span class="comment">//引入redux-devtools-extension</span></span><br><span class="line"><span class="keyword">import</span> &#123;composeWithDevTools&#125; <span class="keyword">from</span> <span class="string">&#x27;redux-devtools-extension&#x27;</span></span><br><span class="line"><span class="comment">//暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(reducer,composeWithDevTools(applyMiddleware(thunk)))</span><br><span class="line"><span class="comment">// ----------------------------index.js 引入store对象--------------------------------</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="comment">/* 此处需要用Provider包裹App，目的是让App所有的后代容器组件都能接收到store */</span></span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">  &lt;App/&gt;</span><br><span class="line">  &lt;/Provider&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>combinReducers()</li></ul><p>作用：合并多个reducer函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------------------ redux/reducers/index.js ------------------------------------</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该文件用于汇总所有的reducer为一个总的reducer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//引入combineReducers，用于汇总多个reducer</span></span><br><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">//引入为Count组件服务的reducer</span></span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&#x27;./count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> persons <span class="keyword">from</span> <span class="string">&#x27;./person&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//汇总所有的reducer变为一个总的reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">  count,persons</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="redux异步编程"><a href="#redux异步编程" class="headerlink" title="redux异步编程"></a>redux异步编程</h3><p>使用异步中间件：</p><p>下载依赖npm i redux-thunk</p><h3 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h3><p><a href="https://imgtu.com/i/TdRunK"><img src="https://s4.ax1x.com/2021/12/26/TdRunK.png" alt="TdRunK.png"></a></p><p>react插件库，用来简化react应用中使用redux</p><p>react-redux将组件分成两大类：ui组件与容器组件</p><ul><li>ui组件<ul><li>只负责ui呈现，不带有任何业务逻辑</li><li>通过props接收数据</li><li>不使用任何redux的api</li><li>一般保存在components文件夹下，也可以直接在容器组件中直接加工成容器组件</li></ul></li><li>容器组件<ul><li>负责管理数据和业务逻辑</li><li>使用redux的api</li><li>一般保存在containers文件夹下</li></ul></li></ul><p>相关api</p><ul><li><p>provider</p><p>作用：记所有组件都可以得到state数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="comment">/* 此处需要用Provider包裹App，目的是让App所有的后代容器组件都能接收到store */</span></span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">  &lt;App/&gt;</span><br><span class="line">  &lt;/Provider&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>connect()()</p><p>作用：用于包装ui组件生成容器组件</p><p>connect(mapStateToProps,mapDispatchToprops)(ui组件)</p><p>注意：</p><ul><li>默认传入state与dispatch</li><li>省略dispatch直接传入action，自动调用dispatch</li></ul><p><strong>mapStateToProps</strong></p><p>将外部数据state对象转换为ui组件的标签属性，返回一个对象</p><p>返回对象的key就是传递给ui组件的props的key，value就作为传递ui组件props的value</p><p>用于传递状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: state &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mapDispatchToProps</strong></p><p>将分发的action的函数转换为ui组件的标签属性，返回一个对象</p><p>用于传递操作状态的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">         jia:<span class="function"><span class="params">number</span> =&gt;</span> dispatch(createIncrementAction(number)),</span><br><span class="line">  jian:<span class="function"><span class="params">number</span> =&gt;</span> dispatch(createDecrementAction(number)),</span><br><span class="line">  jiaAsync:<span class="function">(<span class="params">number,time</span>) =&gt;</span> dispatch(createIncrementAsyncAction(number,time)),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps,mapDispatchToProps)(CountUI)</span><br><span class="line"><span class="comment">// ------- 简化代码 -----</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">state =&gt; (&#123; <span class="attr">count</span>: state.count, <span class="attr">personCount</span>: state.person.length &#125;),</span><br><span class="line">    &#123; increment, decrement, incrementAsync &#125;</span><br><span class="line">)(Count)</span><br></pre></td></tr></table></figure></li></ul><h3 id="求和案例"><a href="#求和案例" class="headerlink" title="求和案例"></a>求和案例</h3><h4 id="redux-mini版"><a href="#redux-mini版" class="headerlink" title="redux mini版"></a>redux mini版</h4><ol><li><p>去除自身状态</p></li><li><p>src下建立：</p><p>-redux</p><p>-store.js</p><p>-count_reducer.js</p></li><li><p>store.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./count_reducer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(countReducer)</span><br></pre></td></tr></table></figure></li><li><p>count_reducer.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initState = <span class="number">0</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">preState=initState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type, data &#125; = action;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;increment&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> preState + data</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;decrement&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> preState - data</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> preState</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>count/index.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../../redux/store&#x27;</span>  </span><br><span class="line">increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">    store.dispatch(&#123; <span class="attr">type</span>: <span class="string">&#x27;increment&#x27;</span>, <span class="attr">data</span>: value*<span class="number">1</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  incrementIfOdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.selectNumber;</span><br><span class="line">    <span class="keyword">const</span> count = store.getState();</span><br><span class="line">    <span class="keyword">if</span> (count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">      store.dispatch(&#123; <span class="attr">type</span>: <span class="string">&#x27;increment&#x27;</span>, <span class="attr">data</span>: value * <span class="number">1</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;h1&gt;当前求和为： &#123;store.getState()&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line">store.subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="redux-完整版"><a href="#redux-完整版" class="headerlink" title="redux 完整版"></a>redux 完整版</h4><p>新增文件：</p><ol><li><p>count_action.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; INCREMENT, DECREMENT &#125; <span class="keyword">from</span> <span class="string">&#x27;./constant&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAction = <span class="function"><span class="params">data</span> =&gt;</span> (&#123; <span class="attr">type</span>: INCREMENT, data &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDecrementAction = <span class="function"><span class="params">data</span> =&gt;</span> (&#123; <span class="attr">type</span>: DECREMENT, data &#125;)</span><br></pre></td></tr></table></figure></li><li><p>constant.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">&#x27;increment&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">&#x27;decrement&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="redux-异步action"><a href="#redux-异步action" class="headerlink" title="redux 异步action"></a>redux 异步action</h4><p>延迟动作不想给组件自身，交给action管理</p><p>action返回一般对象为同步action,返回函数是异步action</p><p>使用redux-thunk,配置在store中</p><ol><li><p>修改count_action.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步action指action值为函数,异步action中一般会传入同步action,参数值为dispatch, 不是必须用的，在action中写异步时用，在组件中写异步方法不用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createIncrementAsyncAction = <span class="function">(<span class="params">data, time</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      dispatch(createIncrementAction(data))</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改store.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./count_reducer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(countReducer, applyMiddleware(thunk))</span><br></pre></td></tr></table></figure></li><li><p>修改count/index.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">incrementAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.selectNumber;</span><br><span class="line">  store.dispatch(createIncrementAsyncAction(value * <span class="number">1</span>, <span class="number">500</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="react-redux基础版"><a href="#react-redux基础版" class="headerlink" title="react-redux基础版"></a>react-redux基础版</h4><ol><li>ui组件内不能使用任何redux的api，只负责页面呈现</li><li>容器组件：只负责和redux通信，将结果交给ui组件</li><li>创建容器组件：react-redux的connect()(ui)方法</li><li>容器组件中store是靠props传进去的</li></ol><p>App.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入容器组件</span></span><br><span class="line"><span class="keyword">import</span> Count <span class="keyword">from</span> <span class="string">&#x27;./containers/Count&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Count store=&#123;store&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加容器组件containers/Count/index.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CountUI <span class="keyword">from</span> <span class="string">&#x27;../../components/Count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createIncrementAction,createDecrementAction, createIncrementAsyncAction &#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">count</span>: state &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    increment: <span class="function">(<span class="params">value</span>) =&gt;</span> dispatch(createIncrementAction(value)),</span><br><span class="line">    decrement: <span class="function">(<span class="params">value</span>) =&gt;</span> dispatch(createDecrementAction(value)),</span><br><span class="line">    incrementAsync: <span class="function">(<span class="params">value, time</span>) =&gt;</span> dispatch(createIncrementAsyncAction(value,time)),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(CountUI)</span><br></pre></td></tr></table></figure><p>修改ui组件components/Count/index.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">increment = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.selectNumber</span><br><span class="line">  <span class="built_in">this</span>.props.increment(value*<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">decrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.selectNumber;</span><br><span class="line">  <span class="built_in">this</span>.props.decrement(value * <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">incrementIfOdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.selectNumber;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.props.count % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.props.increment(value*<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">incrementAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value &#125; = <span class="built_in">this</span>.selectNumber;</span><br><span class="line">  <span class="built_in">this</span>.props.incrementAsync(value*<span class="number">1</span>,<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;h1&gt;当前求和为： &#123;<span class="built_in">this</span>.props.count&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h4 id="react-redux优化"><a href="#react-redux优化" class="headerlink" title="react-redux优化"></a>react-redux优化</h4><p>优化点：</p><ul><li>容器组件和ui组件合并为一个文件</li><li>无需自己给容器组件传递store，给<code>&lt;App/&gt;</code>包裹一个<code>&lt;Provider store=&#123;store&#125;&gt;</code>即可</li><li>使用react-redux后不用自己监听redux中状态的改变</li><li>mapDispatchToProps可以简单的写成一个对象</li><li>一个组件使用redux经过哪几步？<ul><li>定义好ui组件</li><li>引入connect生成一个容器组件并暴露</li><li>在ui组件中通过this.props.xxx读取和操作状态</li></ul></li></ul><p>container/Count/index.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  (state) =&gt; (&#123; <span class="attr">count</span>: state &#125;),</span><br><span class="line">  <span class="comment">// mapDispatchToProps一般写法</span></span><br><span class="line">  <span class="comment">// (dispatch) =&gt; (&#123;</span></span><br><span class="line">  <span class="comment">//   increment: (value) =&gt; dispatch(createIncrementAction(value)),</span></span><br><span class="line">  <span class="comment">//   decrement: (value) =&gt; dispatch(createDecrementAction(value)),</span></span><br><span class="line">  <span class="comment">//   incrementAsync: (value, time) =&gt;</span></span><br><span class="line">  <span class="comment">//     dispatch(createIncrementAsyncAction(value, time)),</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">  <span class="comment">// mapDispatchToProps简写，写成对象，传入action自动调用dispatch</span></span><br><span class="line">  &#123;</span><br><span class="line">    increment: createIncrementAction,</span><br><span class="line">    decrement: createDecrementAction,</span><br><span class="line">    incrementAsync: createIncrementAsyncAction</span><br><span class="line">  &#125;</span><br><span class="line">)(CountUI);</span><br></pre></td></tr></table></figure><p>src/index.js</p><p>使用react-redux无需再去监听redux状态改变</p><p>提供Provider给所有需要store的组件传入store</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/Provider&gt;, </span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听redux中状态的改变</span></span><br><span class="line"><span class="comment">// store.subscribe(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   ReactDOM.render(&lt;App /&gt;, document.getElementById(&#x27;root&#x27;))</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h4 id="react-redux数据共享版"><a href="#react-redux数据共享版" class="headerlink" title="react-redux数据共享版"></a>react-redux数据共享版</h4><ul><li>定义Person组件，与Count组件通过redux共享数据</li><li>为Person组件编写reducer,action，配置constant常量</li><li>使用combineReducer进行reducer合并</li><li>交给store的是总reducer，取出状态时取到位</li></ul><p>containers/Person/index.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;nanoid&#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createAddPersonAction &#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/actions/person&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  addPerson = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="built_in">this</span>.nameNode.value</span><br><span class="line">    <span class="keyword">const</span> age = <span class="built_in">this</span>.ageNode.value</span><br><span class="line">    <span class="keyword">const</span> personobj = &#123;<span class="attr">id</span>:nanoid(),name,age&#125;</span><br><span class="line">    <span class="built_in">this</span>.props.addPerson(personobj)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> personArr = <span class="built_in">this</span>.props.person</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;我是person组件&lt;/h2&gt;</span><br><span class="line">        &lt;h4&gt;Count组件里的求和为：&#123;<span class="built_in">this</span>.props.count&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;input ref=&#123;<span class="function"><span class="params">c</span> =&gt;</span> <span class="built_in">this</span>.nameNode = c&#125;type=<span class="string">&quot;text&quot;</span> /&gt;</span><br><span class="line">        &lt;input ref=&#123;<span class="function"><span class="params">c</span> =&gt;</span> <span class="built_in">this</span>.ageNode = c&#125;type=<span class="string">&quot;text&quot;</span> /&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.addPerson&#125;&gt;增加&lt;/button&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            personArr.map(<span class="function">(<span class="params">person</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;person.id&#125;</span>&gt;</span>&#123;person.name&#125;--&#123;person.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  <span class="comment">// 可以拿到Count组件里的值</span></span><br><span class="line">  state =&gt; (&#123;<span class="attr">person</span>: state.person,<span class="attr">count</span>:state.count&#125;),</span><br><span class="line">  &#123; <span class="attr">addPerson</span>: createAddPersonAction &#125;</span><br><span class="line">)(Person)</span><br></pre></td></tr></table></figure><p>actions/person.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ADD_PERSON &#125; <span class="keyword">from</span> <span class="string">&#x27;../constant&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createAddPersonAction = <span class="function"><span class="params">personObj</span> =&gt;</span> (&#123;</span><br><span class="line">  type: ADD_PERSON, <span class="attr">data</span>: personObj</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>reducer/person.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ADD_PERSON &#125; <span class="keyword">from</span> <span class="string">&quot;../constant&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initState = [&#123;<span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>, <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>&#125;]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">personReducer</span>(<span class="params">preState=initState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type, data &#125; = action</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_PERSON:</span><br><span class="line">      <span class="keyword">return</span> [data, ...preState]</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> preState</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redux/store.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, combineReducers &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/count&#x27;</span></span><br><span class="line"><span class="keyword">import</span> personReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/person&#x27;</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并后是一个对象，取用时使用state.xxx</span></span><br><span class="line"><span class="keyword">const</span> allReducers = combineReducers(&#123;</span><br><span class="line">  count: countReducer,</span><br><span class="line">  person: personReducer</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(allReducers, applyMiddleware(thunk))</span><br></pre></td></tr></table></figure><h4 id="redact-redux开发者工具"><a href="#redact-redux开发者工具" class="headerlink" title="redact-redux开发者工具"></a>redact-redux开发者工具</h4><p>redux/store.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; composeWithDevTools &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-devtools-extension&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(allReducers, composeWithDevTools(applyMiddleware(thunk))</span><br></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p><code>npm run build</code>打包项目</p><p>全局安装<code>npm i serve</code>，serve 项目目录测试运行。</p><p>或者搭建后台环境执行。</p><p>例nodejs环境：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*const options = &#123;</span></span><br><span class="line"><span class="comment">    target: &quot;http://localhost:8080&quot;,</span></span><br><span class="line"><span class="comment">    changeOrigin:true,</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">const apiProxy = proxy(options)*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname))</span><br><span class="line"><span class="comment">//app.use(&#x27;/&#x27;, apiProxy)</span></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h2 id="react-拓展"><a href="#react-拓展" class="headerlink" title="react 拓展"></a>react 拓展</h2><h4 id="setState的2种写法"><a href="#setState的2种写法" class="headerlink" title="setState的2种写法"></a>setState的2种写法</h4><ul><li><p>setState(stateChange, [callback])</p><p>stateChange是一个对象，callback是render后的回调</p></li><li><p>setState(updater, [callback])</p><p>updater是一个函数，接收state和props两个参数，返回对象</p></li></ul><h4 id="lazyLoad"><a href="#lazyLoad" class="headerlink" title="lazyLoad"></a>lazyLoad</h4><p>路由组件lazyLoad</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component,lazy,Suspense&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// import Home from &#x27;./Home&#x27;</span></span><br><span class="line"><span class="keyword">const</span> Home = lazy(<span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Home&#x27;</span>) )</span><br></pre></td></tr></table></figure><h4 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h4><ul><li><p>useState()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">State Hook让函数组件也可以有state状态, 并进行状态数据的读写操作</span><br><span class="line">语法: const [xxx, setXxx] &#x3D; React.useState(initValue) </span><br><span class="line">useState()说明:</span><br><span class="line">    参数: 第一次初始化指定的值在内部作缓存</span><br><span class="line">    返回值: 包含2个元素的数组, 第1个为内部当前状态值, 第2个为更新状态值的函数</span><br><span class="line">setXxx()2种写法:</span><br><span class="line">    setXxx(newValue): 参数为非函数值, 直接指定新的状态值, 内部用其覆盖原来的状态值</span><br><span class="line">    setXxx(value &#x3D;&gt; newValue): 参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值</span><br></pre></td></tr></table></figure></li><li><p>useEffect</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Effect Hook 可以让你在函数组件中执行副作用操作(用于模拟类组件中的生命周期钩子)</span><br><span class="line">React中的副作用操作:发ajax请求数据获取、设置订阅 &#x2F; 启动定时器、手动更改真实DOM</span><br><span class="line">语法：</span><br><span class="line">userEffect(() &#x3D;&gt; &#123;</span><br><span class="line">&#x2F;&#x2F; 执行副操作</span><br><span class="line">return () &#x3D;&gt; &#123; &#x2F;&#x2F; 写了这里在组件卸载前执行</span><br><span class="line">&#125;</span><br><span class="line">&#125;,[statevalue]) &#x2F;&#x2F; statevalue值变化引起执行，为空只初始化执行</span><br><span class="line">可以把 useEffect Hook 看做如下三个函数的组合：componentDidMount()、componentDidUpdate()、componentWillUnmount()</span><br></pre></td></tr></table></figure></li><li><p>useRef</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ref Hook可以在函数组件中存储&#x2F;查找组件内的标签或任意其它数据</span><br><span class="line">语法: const refContainer &#x3D; useRef()</span><br><span class="line">作用:保存标签对象,功能与React.createRef()一样</span><br></pre></td></tr></table></figure></li></ul><h4 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Fragment&gt;&lt;Fragment&gt;</span><br><span class="line">&lt;&gt;&lt;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><blockquote><p>一种组件间通信方式, 常用于【父组件】与【后代组件】间通信</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">const</span> XxxContext = React.createContext()  </span><br><span class="line">&lt;xxxContext.Provider value=&#123;数据&#125;&gt;</span><br><span class="line">子组件</span><br><span class="line">&lt;/xxxContext.Provider&gt;</span><br><span class="line"><span class="comment">// 后代组件</span></span><br><span class="line"><span class="comment">//第一种方式:仅适用于类组件 </span></span><br><span class="line"><span class="keyword">static</span> contextType = xxxContext  <span class="comment">// 声明接收context</span></span><br><span class="line"><span class="built_in">this</span>.context <span class="comment">// 读取context中的value数据</span></span><br><span class="line"><span class="comment">//第二种方式: 函数组件与类组件都可以</span></span><br><span class="line">&lt;xxxContext.Consumer&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        value =&gt; ( <span class="comment">// value就是context中的value数据</span></span><br><span class="line">        要显示的内容</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/xxxContext.Consumer&gt;</span><br></pre></td></tr></table></figure><h4 id="组件优化"><a href="#组件优化" class="headerlink" title="组件优化"></a>组件优化</h4><ul><li>重写shouldComponentUpdate()方法</li><li>使用PureComponent</li></ul><h4 id="render-props"><a href="#render-props" class="headerlink" title="render props"></a>render props</h4><p>向组件内部动态传入带内容的结构(标签)</p><ul><li><p>使用children props: 通过组件标签体传入结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;A&gt;</span><br><span class="line">  &lt;B&gt;xxxx&lt;&#x2F;B&gt;</span><br><span class="line">&lt;&#x2F;A&gt;</span><br><span class="line">&#123;this.props.children&#125;</span><br><span class="line">问题: 如果B组件需要A组件内的数据, &#x3D;&#x3D;&gt; 做不到 </span><br></pre></td></tr></table></figure></li><li><p>render props</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;A render&#x3D;&#123;(data) &#x3D;&gt; &lt;C data&#x3D;&#123;data&#125;&gt;&lt;&#x2F;C&gt;&#125;&gt;&lt;&#x2F;A&gt;</span><br><span class="line">A组件: &#123;this.props.render(内部state数据)&#125;</span><br><span class="line">C组件: 读取A组件传入的数据显示 &#123;this.props.data&#125; </span><br></pre></td></tr></table></figure></li></ul><h4 id="错误边界"><a href="#错误边界" class="headerlink" title="错误边界"></a>错误边界</h4><p>用来捕获后代组件错误，渲染出备用页面</p><p>只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生命周期函数，一旦后台组件报错，就会触发</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">getDerivedStateFromError</span>(<span class="params">error</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="comment">// 在render之前触发</span></span><br><span class="line">    <span class="comment">// 返回新的state</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        hasError: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">componentDidCatch</span>(<span class="params">error, info</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 统计页面的错误。发送请求发送到后台去</span></span><br><span class="line">    <span class="built_in">console</span>.log(error, info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;重学React&quot;&gt;&lt;a href=&quot;#重学React&quot; class=&quot;headerlink&quot; title=&quot;重学React&quot;&gt;&lt;/a&gt;重学React&lt;/h1&gt;&lt;h2 id=&quot;基础部分&quot;&gt;&lt;a href=&quot;#基础部分&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="react" scheme="http://maya1900.github.io/categories/react/"/>
    
    
    <category term="react" scheme="http://maya1900.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React-hook练手小项目--待办事件</title>
    <link href="http://maya1900.github.io/article/202112/todolist-react/"/>
    <id>http://maya1900.github.io/article/202112/todolist-react/</id>
    <published>2021-12-27T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-hook练手小项目–待办事件"><a href="#React-hook练手小项目–待办事件" class="headerlink" title="React-hook练手小项目–待办事件"></a>React-hook练手小项目–待办事件</h2><h3 id="一、学到了什么？"><a href="#一、学到了什么？" class="headerlink" title="一、学到了什么？"></a>一、学到了什么？</h3><ol><li>写代码前的规划</li><li>useState()/useRef()/useCallback()/useEffect()的使用</li><li>父子组件传值</li><li>自定义组件双标签的写法</li><li>使用useEffect()的先后顺序</li><li>条件渲染</li></ol><h3 id="二、具体写法"><a href="#二、具体写法" class="headerlink" title="二、具体写法"></a>二、具体写法</h3><ol><li><p>写代码前考虑可以分为几个模块，分个组件，组件之间的关系，如何排版</p></li><li><p>useState</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义变量，改变变量的方法，初始值</span></span><br><span class="line"><span class="keyword">const</span> [todoList, setTodoList] = useState([])</span><br></pre></td></tr></table></figure><p>useRef</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">const</span> inputRef = useRef();</span><br><span class="line">&lt;input ref=&#123;inputRef&#125; type=<span class="string">&quot;text&quot;</span>&gt;&lt;/input&gt;</span><br><span class="line"><span class="comment">// 获取值</span></span><br><span class="line">inputRef.current.value</span><br></pre></td></tr></table></figure><p>useEffect</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在页面加载完成的时候以及数据更新的时候,触发执行</span></span><br><span class="line"><span class="comment">// 第二个参数，当依赖变化的时候执行</span></span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    sessionStorage.setItem(<span class="string">&#x27;todoData&#x27;</span>, <span class="built_in">JSON</span>.stringify(todoList))</span><br><span class="line">&#125;, [todoList])</span><br></pre></td></tr></table></figure><p>useCallback</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useCallback缓存todoList，只有todlList发生变化再次渲染，减少不必要的渲染问题</span></span><br><span class="line"><span class="keyword">const</span> openCheckModal = useCallback(<span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">    setCurrentData(<span class="function">() =&gt;</span> todoList.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.id === id)[<span class="number">0</span>])</span><br><span class="line">    setShowCheckModal(<span class="literal">true</span>)</span><br><span class="line">&#125;, [todoList])</span><br></pre></td></tr></table></figure></li><li><p>父子通讯</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父：</span></span><br><span class="line"><span class="comment">// isInputShow属性传给子组件</span></span><br><span class="line">&lt;AddInput </span><br><span class="line">    isInputShow=&#123; isInputShow &#125;</span><br><span class="line">    addItem=&#123;addItem&#125;</span><br><span class="line">    /&gt;</span><br><span class="line"><span class="comment">// 定义方法</span></span><br><span class="line"><span class="keyword">const</span> addItem = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 子：</span></span><br><span class="line"><span class="comment">// 子组件使用了addItem方法并传递给父组件</span></span><br><span class="line"><span class="keyword">const</span> &#123; isInputShow, addItem &#125; = props,</span><br></pre></td></tr></table></figure></li><li><p>双标签的写法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双标签封装通过this.props.children来获取标签内的元素，主要目的就是能嵌套标签</span></span><br><span class="line"><span class="comment">// Modal 基础组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Modal</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; isShowModal, modalTitle, children &#125; = props</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        isShowModal</span><br><span class="line">        ?</span><br><span class="line">          (</span><br><span class="line">            &lt;div className=<span class="string">&quot;modal&quot;</span>&gt;</span><br><span class="line">              &lt;div className=<span class="string">&quot;inner&quot;</span>&gt;</span><br><span class="line">                &lt;div className=<span class="string">&quot;m-header&quot;</span>&gt;&#123;modalTitle&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div className=<span class="string">&quot;content-wrapper&quot;</span>&gt;</span><br><span class="line">                  &#123;children&#125;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          )</span><br><span class="line">        :</span><br><span class="line">        <span class="string">&quot;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// CheckModal包装组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheckModal</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; isShowCheckModal, data, closeModal &#125; = props</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Modal</span><br><span class="line">      isShowModal=&#123;isShowCheckModal&#125;</span><br><span class="line">      modalTitle=<span class="string">&quot;查看事件&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;p className=<span class="string">&quot;topic&quot;</span>&gt;时间：&#123;formatDateTime(data.id)&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p className=<span class="string">&quot;topic&quot;</span>&gt;内容：&#123;data.content&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p className=<span class="string">&quot;topic&quot;</span>&gt;时间：&#123;data.completed ? <span class="string">&#x27;已完成&#x27;</span> : <span class="string">&#x27;未完成&#x27;</span>&#125;&lt;/p&gt;</span><br><span class="line">      &lt;button className=<span class="string">&#x27;btn btn-primary confirm-btn&#x27;</span> onClick=&#123;closeModal&#125;&gt;确定&lt;/button&gt;</span><br><span class="line">    &lt;/Modal&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用useEffect()的先后顺序</p><p>初始化执行useEffect依次执行，需要考虑不同顺序下的不同结果</p></li><li><p>条件渲染</p><p>上面例子。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;React-hook练手小项目–待办事件&quot;&gt;&lt;a href=&quot;#React-hook练手小项目–待办事件&quot; class=&quot;headerlink&quot; title=&quot;React-hook练手小项目–待办事件&quot;&gt;&lt;/a&gt;React-hook练手小项目–待办事件&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="项目" scheme="http://maya1900.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="http://maya1900.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>idea2021.3激活教程</title>
    <link href="http://maya1900.github.io/article/202112/ideaactive/"/>
    <id>http://maya1900.github.io/article/202112/ideaactive/</id>
    <published>2021-12-24T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="idea2021-3激活教程"><a href="#idea2021-3激活教程" class="headerlink" title="idea2021.3激活教程"></a>idea2021.3激活教程</h2><p>无需激活码，激活至5000年！！</p><p>插件地址：</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1c-BaKu6W-cFxv_2rtMet8g">https://pan.baidu.com/s/1c-BaKu6W-cFxv_2rtMet8g</a><br>提取码：3xc7</p></blockquote><h3 id="简单："><a href="#简单：" class="headerlink" title="简单："></a>简单：</h3><ol><li>登录Jetbrains账号，点击试用</li><li>设置– 编辑自定义VM选项</li><li>完成！</li></ol><h3 id="详细："><a href="#详细：" class="headerlink" title="详细："></a>详细：</h3><ol><li><p>登录Jetbrains账号，点击试用</p></li><li><p>设置– 编辑自定义VM选项(Edit Custom VM Options…)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:D:\\Program Files\\JetBrains\\IntelliJ IDEA <span class="number">2021.3</span>\\ja-netfilter\\ja-netfilter.jar</span><br></pre></td></tr></table></figure></li><li><p>编写janf_config.txt,放在ja-netfilter的同级目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[DNS]</span><br><span class="line">EQUAL,jetbrains.com</span><br><span class="line"></span><br><span class="line">[URL]</span><br><span class="line">PREFIX,https:<span class="comment">//account.jetbrains.com/lservice/rpc/validateKey.action</span></span><br><span class="line"></span><br><span class="line">[MyMap]</span><br><span class="line">EQUAL,licenseeName-&gt;zhile</span><br><span class="line">EQUAL,gracePeriodDays-&gt;<span class="number">30</span></span><br><span class="line">EQUAL,paidUpTo-&gt;<span class="number">5000</span>-<span class="number">12</span>-<span class="number">31</span></span><br></pre></td></tr></table></figure></li><li><p>添加mymap-v1.0.1.jar</p></li><li><p>完成</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;idea2021-3激活教程&quot;&gt;&lt;a href=&quot;#idea2021-3激活教程&quot; class=&quot;headerlink&quot; title=&quot;idea2021.3激活教程&quot;&gt;&lt;/a&gt;idea2021.3激活教程&lt;/h2&gt;&lt;p&gt;无需激活码，激活至5000年！！&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="其他" scheme="http://maya1900.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="idea" scheme="http://maya1900.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>myaMusic本地音乐播放器</title>
    <link href="http://maya1900.github.io/article/202110/myamusic/"/>
    <id>http://maya1900.github.io/article/202110/myamusic/</id>
    <published>2021-11-20T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="myaMusic"><a href="#myaMusic" class="headerlink" title="myaMusic"></a>myaMusic</h2><blockquote><p>一个基于 electron-vue 开发的音乐播放器</p></blockquote><blockquote><p>使用：vue+element+electron</p></blockquote><blockquote><p>源码地址： <a href="https://github.com/maya1900/myamusic">maya1900/myamusic: a simple local music player. (github.com)</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run starting</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>  1.添加单/多个本地音乐，添加文件目录，删除delete；</li><li>  2.播放歌曲，歌词同步(歌词lrc文件同名，放和歌曲同级目录下)，最小化到托盘；</li><li>  3.列表循环、单曲循环、随机播放；</li><li>  4.调整播放进度，调节音量、静音</li></ul><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="1-搭建electron项目"><a href="#1-搭建electron项目" class="headerlink" title="1. 搭建electron项目"></a>1. 搭建electron项目</h3><p>这里先创建vue项目，再使用vue-cli-plugin-electron-builder完成的，完成后直接npm run electron:serve即可直接启动应用，不用先启动vue，再启动electron。</p><h3 id="2-设置应用无边框"><a href="#2-设置应用无边框" class="headerlink" title="2. 设置应用无边框"></a>2. 设置应用无边框</h3><p>在background.js，new BrowserWindow时options里添加frame: false即可</p><h3 id="3-添加本地文件、文件夹，获取音乐内容"><a href="#3-添加本地文件、文件夹，获取音乐内容" class="headerlink" title="3. 添加本地文件、文件夹，获取音乐内容"></a>3. 添加本地文件、文件夹，获取音乐内容</h3><p>点击事件时使用渲染进程ipcRenderer调用主进程ipcMain,主进程里接收事件，打开文件选择框选择文件/文件夹，在option里设置，回调函数为文件路径，使用jsmediatags来处理得到音乐信息；</p><h3 id="4-audio播放本地音乐"><a href="#4-audio播放本地音乐" class="headerlink" title="4. audio播放本地音乐"></a>4. audio播放本地音乐</h3><p>audio标签因为浏览器的限制，不能播放本地音频，需要在new BrowserWindow时设置webSecurity为false,或者html里给audio标签加入属性crossOrigin为true</p><h3 id="5-查找歌词、歌词同步"><a href="#5-查找歌词、歌词同步" class="headerlink" title="5. 查找歌词、歌词同步"></a>5. 查找歌词、歌词同步</h3><p>找到相同目录下相同名称的.lrc文件，使用fs模块来读取文件，再进行数据处理</p><h3 id="6-设置托盘"><a href="#6-设置托盘" class="headerlink" title="6. 设置托盘"></a>6. 设置托盘</h3><p>main.js里new Tray托盘，设置好对应事件即可</p><h3 id="7-打包失败"><a href="#7-打包失败" class="headerlink" title="7. 打包失败"></a>7. 打包失败</h3><p>里面有几个资源是下载github的比较慢，可以查看报错信息找到相应资源地址下载后放到<strong>C:\Users\Administrator\AppData\Local\electron\Cache</strong> 目录下；</p><p>不是资源问题，删掉node_modules，重新npm i；</p><p>将项目上传至github再进行打包</p><h3 id="8-打包成功应用白屏"><a href="#8-打包成功应用白屏" class="headerlink" title="8. 打包成功应用白屏"></a>8. 打包成功应用白屏</h3><p>去掉vue router下的mode: history；</p><p>检查项目里的各个路径是否正确，是否英文</p><h3 id="9-打包后图标问题"><a href="#9-打包后图标问题" class="headerlink" title="9. 打包后图标问题"></a>9. 打包后图标问题</h3><p>图标放在build/icons目录下，不小于256x256，png/icns/ico,在线生成图标地址：<a href="https://cloudconvert.com/png-to-icns">PNG to ICNS | CloudConvert</a></p><p>开发环境没问题，打包后图标消失。把图标放在publick文件目录下，使用<code>path.join(__static, &#39;favicon.ico&#39;)</code>， __static为静态目录</p><h3 id="10-打包前的配置"><a href="#10-打包前的配置" class="headerlink" title="10.  打包前的配置"></a>10.  打包前的配置</h3><p>使用这个插件配置还是在vue.config.js中进行配置(参考)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  pluginOptions: &#123;</span><br><span class="line">    electronBuilder: &#123;</span><br><span class="line">      nodeIntegration: <span class="literal">true</span>,</span><br><span class="line">      builderOptions: &#123;</span><br><span class="line">            <span class="string">&quot;productName&quot;</span>:<span class="string">&quot;xxxx&quot;</span>,<span class="comment">//项目名 这也是生成的exe文件的前缀名</span></span><br><span class="line">            <span class="string">&quot;appId&quot;</span>: <span class="string">&quot;xxxxx&quot;</span>,<span class="comment">//包名  </span></span><br><span class="line">            <span class="string">&quot;copyright&quot;</span>:<span class="string">&quot;xxxx&quot;</span>,<span class="comment">//版权  信息</span></span><br><span class="line">            <span class="string">&quot;compression&quot;</span>: <span class="string">&quot;store&quot;</span>, <span class="comment">// &quot;store&quot; | &quot;normal&quot;| &quot;maximum&quot; 打包压缩情况(store 相对较快)，store 39749kb, maximum 39186kb</span></span><br><span class="line">            <span class="string">&quot;directories&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;output&quot;</span>: <span class="string">&quot;build&quot;</span> <span class="comment">// 输出文件夹</span></span><br><span class="line">            &#125;, </span><br><span class="line">            <span class="string">&quot;asar&quot;</span>: <span class="literal">false</span>, <span class="comment">// asar打包</span></span><br><span class="line">            <span class="string">&quot;extraResources&quot;</span>:  &#123; <span class="comment">// 拷贝dll等静态文件到指定位置</span></span><br><span class="line">                <span class="string">&quot;from&quot;</span>: <span class="string">&quot;./app-update.yml&quot;</span>,</span><br><span class="line">                <span class="string">&quot;to&quot;</span>: <span class="string">&quot;./b.txt&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;win&quot;</span>: &#123;  </span><br><span class="line">                <span class="string">&quot;icon&quot;</span>: <span class="string">&quot;xxx/icon.ico&quot;</span><span class="comment">//图标路径,</span></span><br><span class="line">                <span class="string">&quot;extraResources&quot;</span>:  &#123; <span class="comment">// 拷贝dll等静态文件到指定位置(用于某个系统配置)</span></span><br><span class="line">                    <span class="string">&quot;from&quot;</span>: <span class="string">&quot;./app-update.yml&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;to&quot;</span>: <span class="string">&quot;./b.txt&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;nsis&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;oneClick&quot;</span>: <span class="literal">false</span>, <span class="comment">// 一键安装</span></span><br><span class="line">                <span class="string">&quot;guid&quot;</span>: <span class="string">&quot;xxxx&quot;</span>, <span class="comment">//注册表名字，不推荐修改</span></span><br><span class="line">                <span class="string">&quot;perMachine&quot;</span>: <span class="literal">true</span>, <span class="comment">// 是否开启安装时权限限制（此电脑或当前用户）</span></span><br><span class="line">                <span class="string">&quot;allowElevation&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许请求提升。 如果为false，则用户必须使用提升的权限重新启动安装程序。</span></span><br><span class="line">                <span class="string">&quot;allowToChangeInstallationDirectory&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许修改安装目录</span></span><br><span class="line">                <span class="string">&quot;installerIcon&quot;</span>: <span class="string">&quot;./build/icons/aaa.ico&quot;</span>, <span class="comment">// 安装图标</span></span><br><span class="line">                <span class="string">&quot;uninstallerIcon&quot;</span>: <span class="string">&quot;./build/icons/bbb.ico&quot;</span>, <span class="comment">//卸载图标</span></span><br><span class="line">                <span class="string">&quot;installerHeaderIcon&quot;</span>: <span class="string">&quot;./build/icons/aaa.ico&quot;</span>, <span class="comment">// 安装时头部图标</span></span><br><span class="line">                <span class="string">&quot;createDesktopShortcut&quot;</span>: <span class="literal">true</span>, <span class="comment">// 创建桌面图标</span></span><br><span class="line">                <span class="string">&quot;createStartMenuShortcut&quot;</span>: <span class="literal">true</span>, <span class="comment">// 创建开始菜单图标</span></span><br><span class="line">                <span class="string">&quot;shortcutName&quot;</span>: <span class="string">&quot;xxxx&quot;</span> <span class="comment">// 图标名称</span></span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>查了很多资料，如没有添加您的参考链接，请及时联系我~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;myaMusic&quot;&gt;&lt;a href=&quot;#myaMusic&quot; class=&quot;headerlink&quot; title=&quot;myaMusic&quot;&gt;&lt;/a&gt;myaMusic&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一个基于 electron-vue 开发的音乐播放器&lt;/p&gt;
&lt;/</summary>
      
    
    
    
    <category term="项目" scheme="http://maya1900.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="http://maya1900.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>项目的一些重难点</title>
    <link href="http://maya1900.github.io/article/202110/project/"/>
    <id>http://maya1900.github.io/article/202110/project/</id>
    <published>2021-10-23T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>3 月进入公司，现在 10 月中了，很快呀，期间做了两个项目，记录下工作上的重难点，以免忘记。</p><p>项目一：</p><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ol><li>项目搭建，axios 封装，权限</li><li>与后台接口请求，请求类型，get/post/put/delete，数据类型，query/body 请求体，编码类型，x-www-form-urlencoded/json</li><li>前台部署，jenkins 的使用，docker/k8s 的了解</li><li>jsplumb 的使用，可视化流程图</li><li>jquery-ui 拖拽</li><li>画布滚动、放大缩小，小地图导航，通过定位的方式不去控制画布大小</li><li>参数自动提示 codemirror</li><li>d3.js 滚动缩放</li><li>vuex 数据的持久化存储 sessionStorage 一个插件</li><li>echarts 的使用，统计流程状态数量</li></ol><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><ol><li>手写树结构文件夹分类</li><li>组件自己调用自己</li><li>切割组件，在一个组件上的操作影响另一个上的内容</li><li>通过连线传递参数</li><li>线上的文字及样式 connect.getOverlay(id).setLabel(str) connect._jsplumb.overlays.canvas.label.cssName</li><li>动态调整组件大小 自定义指令</li><li>画布框选内容</li><li>函数式组件的使用</li></ol><h2 id="其他小技巧"><a href="#其他小技巧" class="headerlink" title="其他小技巧"></a>其他小技巧</h2><ol><li>使用导航做路由跳转时，path 只写到父级，然后通过重定向到目标页面，这样写的好处是只要在父级路由里，导航上的样式都在；</li><li>调试的方法 console debugger vscode 断点</li><li>判断数据类型 Object.prototype.toString.call()</li><li>clip-path（部分支持）裁剪元素形状</li><li>~@代替 src</li></ol><p>项目二：</p><h2 id="重点-1"><a href="#重点-1" class="headerlink" title="重点"></a>重点</h2><ol><li>甘特图 dhtmlx-gantt 的使用</li><li>gantt 左侧样式调整，不再是树型结构，修改总分结构，左右颜色根据自定义设置进行调整</li><li>gantt 图的封装,根据数据调整 gantt 样式</li><li>sort.js 元素排序</li></ol><h2 id="难点-1"><a href="#难点-1" class="headerlink" title="难点"></a>难点</h2><ol><li>动态路由显示，导航组件封装</li><li>store 的封装,使用 getter 来获取 state 值</li><li>使用 tabview 实现页签跳转，调整与 element 相同样式</li><li>使用 monaco-editor 实现代码格式化，高亮，自定义主题，参数自定义提示</li><li>实现组件间拖拽功能，参数拖入编辑器光标位置</li><li>利用 vue 源码 parseHTML 方法完成表达式正确性校验</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;3 月进入公司，现在 10 月中了，很快呀，期间做了两个项目，记录下工作上的重难点，以免忘记。&lt;/p&gt;
&lt;p&gt;项目一：&lt;/p&gt;
&lt;h2 id</summary>
      
    
    
    
    <category term="其他" scheme="http://maya1900.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="idea" scheme="http://maya1900.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>跟着讶佬深入js--防抖</title>
    <link href="http://maya1900.github.io/article/202109/debounce/"/>
    <id>http://maya1900.github.io/article/202109/debounce/</id>
    <published>2021-09-15T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>在不断触发情况下，一段时间后才执行</p><p>防抖、this、event对象（参数）、是否立即执行、有返回值（在immediate中执行）、可取消</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(func, wait);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="built_in">this</span>;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      func.apply(context);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">var</span> callNow = !timeout;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timeout = <span class="literal">null</span></span><br><span class="line">      &#125;, wait);</span><br><span class="line">      <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">        func.apply(context, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        func.apply(context, args);</span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeout, result;</span><br><span class="line">  <span class="keyword">var</span> debounced = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">var</span> callNow = !timeout;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        timeout = <span class="literal">null</span></span><br><span class="line">      &#125;, wait);</span><br><span class="line">      <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">        result = func.apply(context, args)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        func.apply(context, args);</span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  debounced.cancel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;防抖&quot;&gt;&lt;a href=&quot;#防抖&quot; class=&quot;headerlink&quot; title=&quot;防抖&quot;&gt;&lt;/a&gt;防抖&lt;/h2&gt;&lt;p&gt;在不断触发情况下，一段时间后才执行&lt;/p&gt;
&lt;p&gt;防抖、this、event对象（参数）、是否立即执行、有返回值（在immediate中执行</summary>
      
    
    
    
    <category term="js" scheme="http://maya1900.github.io/categories/js/"/>
    
    
    <category term="js" scheme="http://maya1900.github.io/tags/js/"/>
    
    <category term="原型" scheme="http://maya1900.github.io/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>跟着讶佬深入js--按值传递/call/apply/bind/new</title>
    <link href="http://maya1900.github.io/article/202109/value/"/>
    <id>http://maya1900.github.io/article/202109/value/</id>
    <published>2021-09-12T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="按值传递"><a href="#按值传递" class="headerlink" title="按值传递"></a>按值传递</h2><blockquote><p>ECMAScript中所有函数的参数都是按值传递的。</p></blockquote><p>在值传递的参数，进入函数相当于复制值给另外一个变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  a = <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">11</span></span><br><span class="line">foo(a);</span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">obj1, obj2</span>) </span>&#123;</span><br><span class="line">  obj1.value = <span class="string">&#x27;new&#x27;</span></span><br><span class="line">  obj2 = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">value</span>: <span class="string">&#x27;old&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">value</span>: <span class="string">&#x27;old&#x27;</span>&#125;</span><br><span class="line">change(obj1, obj2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj1, obj2)  <span class="comment">// &#123; value: &#x27;new&#x27; &#125; &#123; value: &#x27;old&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>而对象在传递参数时使用的是按共享传递。</p><blockquote><p>对于传递到函数的对象类型，如果直接改变了拷贝的引用，那么是不会影响到原来的那个对象；如果是通过拷贝的引用，去进行内部的值的操作，那么就会改变到原来的对象的。</p></blockquote><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><p>call做的五件事：改变this指向，函数执行了，call可以添加参数，this也可以是null，可以有返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;</span><br><span class="line">fun.call(obj) </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  fun: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fun()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  context.fn = <span class="built_in">this</span>;</span><br><span class="line">  context.fn();</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun.call2(obj)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">  context.fn = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    args.push(<span class="string">&#x27;arguments[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">&#x27;context.fn(&#x27;</span> + args + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name,age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun.call2(obj, <span class="string">&#x27;sz&#x27;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply2 = <span class="function"><span class="keyword">function</span> (<span class="params">context, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">  context.fn = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">    result = context.fn()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> args = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      args.push(<span class="string">&#x27;arr[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">&#x27;context.fn(&#x27;</span> + args + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name,age, <span class="built_in">this</span>.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun.apply2(obj, [<span class="string">&#x27;sz&#x27;</span>, <span class="number">18</span>])</span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>bind做的四件事：改变this指向，函数在调用时执行，在使用bind和调用时都可以增加参数，bind可以是构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bindFoo = bar.bind(foo);</span><br><span class="line">bindFoo();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = &#123; <span class="attr">value</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bindFoo = bar.bind2(foo);</span><br><span class="line"><span class="built_in">console</span>.log(bindFoo());</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value); <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(name); <span class="comment">// daisy</span></span><br><span class="line">  <span class="built_in">console</span>.log(age); <span class="comment">// 18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bindFoo = bar.bind(foo,<span class="string">&#x27;daisy&#x27;</span>);</span><br><span class="line">bindFoo(<span class="string">&#x27;18&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="comment">// 获取bind2函数从第二个参数到最后一个参数</span></span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这个时候的arguments是指bind返回的函数传入的参数</span></span><br><span class="line">    <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> self.apply(context, args.concat(bindArgs));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> foo = &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.habit = <span class="string">&#x27;shopping&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);  <span class="comment">// undefined</span></span><br><span class="line">  <span class="built_in">console</span>.log(name); <span class="comment">// daisy</span></span><br><span class="line">  <span class="built_in">console</span>.log(age); <span class="comment">// 18</span></span><br><span class="line">&#125;</span><br><span class="line">bar.prototype.friend = <span class="string">&#x27;kevin&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> bindFoo = bar.bind(foo, <span class="string">&#x27;daisy&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> bindFoo(<span class="string">&#x27;18&#x27;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.habit); <span class="comment">// shopping</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.friend); <span class="comment">// kevin</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> fBound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 当作为构造函数时，this指向实例，</span></span><br><span class="line">    <span class="comment">// 当作为普通函数时，this 指向window,</span></span><br><span class="line">    <span class="keyword">return</span> self.apply(<span class="built_in">this</span> <span class="keyword">instanceof</span> fBound ? <span class="built_in">this</span> : context, args.concat(bindArgs));</span><br><span class="line">  &#125;</span><br><span class="line">  fBound.prototype = <span class="built_in">this</span>.prototype;</span><br><span class="line">  <span class="keyword">return</span> fBound;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> fNOP = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> fBound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> self.apply(<span class="built_in">this</span> <span class="keyword">instanceof</span> fNOP ? <span class="built_in">this</span> : context, args.concat(bindArgs))</span><br><span class="line">  &#125;</span><br><span class="line">  fNOP.prototype = <span class="built_in">this</span>.prototype</span><br><span class="line">  fBound.prototype = <span class="keyword">new</span> fNOP();</span><br><span class="line">  <span class="keyword">return</span> fBound;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  bar: bar.bind(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line">foo.bar();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind2  = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> fNOP = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> fBound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> self.apply(<span class="built_in">this</span> <span class="keyword">instanceof</span> fNOP ? <span class="built_in">this</span> : context, args.concat(bindArgs));</span><br><span class="line">  &#125;</span><br><span class="line">  fNOP.prototype = <span class="built_in">this</span>.prototype</span><br><span class="line">  fBound.prototype = <span class="keyword">new</span> fNOP();</span><br><span class="line">  <span class="keyword">return</span> fBound;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><p>new做了两件事：<br>继承构造函数里的属性和方法，继承原型中的属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.habit = <span class="string">&quot;games&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo.prototype.strength = <span class="number">80</span>;</span><br><span class="line">foo.prototype.sayYourName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;I am &#x27;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> foo(<span class="string">&#x27;kevin&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"><span class="built_in">console</span>.log(person.age);</span><br><span class="line"><span class="built_in">console</span>.log(person.strength);</span><br><span class="line">person.sayYourName();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 用new Object()的方式新建了一个对象obj</span></span><br><span class="line">  <span class="comment">// obj的原型指向构造函数，这个obj就可以访问到构造函数的原型属性</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  Constructor = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">  obj.__proto__ = Constructor.prototype;</span><br><span class="line">  Constructor.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.habit = <span class="string">&quot;games&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo.prototype.strength = <span class="number">80</span>;</span><br><span class="line">foo.prototype.sayYourName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;I am &#x27;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = objectFactory(foo, <span class="string">&#x27;daisy&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"><span class="built_in">console</span>.log(person.age);</span><br><span class="line"><span class="built_in">console</span>.log(person.strength);</span><br><span class="line">person.sayYourName();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  Constructor = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">  obj.__proto__ = Constructor.prototype;</span><br><span class="line">  <span class="keyword">var</span> ret = Constructor.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> ret === <span class="string">&#x27;object&#x27;</span> ? ret : obj; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;按值传递&quot;&gt;&lt;a href=&quot;#按值传递&quot; class=&quot;headerlink&quot; title=&quot;按值传递&quot;&gt;&lt;/a&gt;按值传递&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ECMAScript中所有函数的参数都是按值传递的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在</summary>
      
    
    
    
    <category term="js" scheme="http://maya1900.github.io/categories/js/"/>
    
    
    <category term="js" scheme="http://maya1900.github.io/tags/js/"/>
    
    <category term="原型" scheme="http://maya1900.github.io/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>跟着讶佬深入js--词法作用域</title>
    <link href="http://maya1900.github.io/article/202109/create/"/>
    <id>http://maya1900.github.io/article/202109/create/</id>
    <published>2021-09-07T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<ul><li>原文: <a href="https://github.com/mqyqingfeng/Blog/issues/3">https://github.com/mqyqingfeng/Blog/issues/3</a></li><li>你不知道的javascript</li></ul><h2 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h2><ol><li>分词/词法分析：将由字符组成的字符串分解成有意义的代码块，这些块被称为词法单元。</li><li>解析/词法分析：将词法单元流（数组）转换成一个由元素嵌套组成的代表了程序语法的结构的树，这个树被称为”抽象语法树“(AST)。</li><li>代码生成：将AST转换为执行代码的过程。</li></ol><h3 id="LHS与RHS"><a href="#LHS与RHS" class="headerlink" title="LHS与RHS"></a>LHS与RHS</h3><p>LHS为赋值操作的目标，RHS为赋值操作的源头。<br>当变量出现在赋值操作的左侧时进行LHS查询，出现在右侧时进行RHS查询。<br>如果查找的目的是对变量进行赋值，那么使用LHS查询；如果目的是获取变量的值，就会使用RHS查询。</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>引擎从当前的执行作用域开始查找变量，如果找不到，就向上一级继续查找，当抵达最外层的全局作用域时，无论是否找到，查找过程都会停止。由多个执行上下文的变量对象构成的链表叫做作用域链</p><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>目前大多数语言使用词法使用域，少数使用动态作用域（bash脚本、Perl中一些模式等）。</p><p>词法作用域就是定义在词法阶段的作用域。<br>无论函数在哪里被调用，它的词法作用域都只由函数被声明所处的位置决定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> val = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> val = <span class="number">2</span>;</span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><p>每一次代码执行和函数调用都会产生一个执行环境，被称为执行上下文。<br>类型：全局执行上下文、函数执行上下文、eval执行上下文。<br>js引擎创建了执行上下文栈ECS来管理执行上下文。</p><p>js执行代码时，首先向ECS压入全局执行上下文，当执行一个函数的时候，就会创建一个执行上下文，并且压入ECS，当函数执行完毕时，就会从ECS弹出，它是一个先入后出的原则，最后整个应用程序结束的时候清空ECSstack。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;f3&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  f3();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  f2();</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line"></span><br><span class="line"><span class="comment">// f1() </span></span><br><span class="line">ECStack.push(&lt;f1&gt; functionContext);</span><br><span class="line"><span class="comment">// 压入f2</span></span><br><span class="line">ECStack.push(&lt;f2&gt; functionContext);</span><br><span class="line"><span class="comment">// 压入f3</span></span><br><span class="line">ECStack.push(&lt;f3&gt; functionContext);</span><br><span class="line"><span class="comment">// 弹出 f3</span></span><br><span class="line">ECStack.pop();</span><br><span class="line"><span class="comment">// 弹出f2</span></span><br><span class="line">ECStack.pop();</span><br><span class="line"><span class="comment">// 弹出f1</span></span><br><span class="line">ECStack.pop();</span><br><span class="line"><span class="comment">// 继续执行后面代码</span></span><br></pre></td></tr></table></figure><h2 id="变量对象"><a href="#变量对象" class="headerlink" title="变量对象"></a>变量对象</h2><p>变量对象是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。</p><h3 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h3><ol><li>可以通过this引用 ，全局对象就是Window对象</li><li>全局对象是由Object构造函数实例化的一个对象</li><li>预定义了一大堆函数和属性。</li><li>作为全局变量的宿主</li><li>在客户端js中，全局对象有window属性指向自身。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br></pre></td></tr></table></figure><h3 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h3><p>在函数上下文中，一般用活动对象AO表示变量对象。</p><p>在执行时分为两个过程：进入执行上下文和代码执行。</p><p>函数上下文的变量对象初始化只包括arguments对象，在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性；在代码执行阶段，会再次修改变量对象的属性值。</p><p>在进入执行上下文时，首先会处理函数声明，其次会处理变量声明，如果变量名称和已经声明的形参或者函数相同，则变量声明不会影响已经存在的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo);  <span class="comment">// 打印函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;foo&quot;</span>)  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="函数执行过程中的作用域链"><a href="#函数执行过程中的作用域链" class="headerlink" title="函数执行过程中的作用域链"></a>函数执行过程中的作用域链</h2><ol><li>函数被创建，保存作用域链到内部属性[[scope]]</li><li>执行函数，创建函数执行上下文，压入执行上下文栈；</li><li>复制函数[[scope]]属性创建函数作用域链到函数上下文中；</li><li>arguments创建活动对象，初始化，加入形参、函数声明、变量声明</li><li>将活动对象压入函数作用域链顶端；</li><li>开始执行函数，修改AO属性值</li><li>函数执行完毕，函数执行上下文出执行上下文栈中弹出。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;原文: &lt;a href=&quot;https://github.com/mqyqingfeng/Blog/issues/3&quot;&gt;https://github.com/mqyqingfeng/Blog/issues/3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;你不知道的javascrip</summary>
      
    
    
    
    <category term="js" scheme="http://maya1900.github.io/categories/js/"/>
    
    
    <category term="js" scheme="http://maya1900.github.io/tags/js/"/>
    
    <category term="原型" scheme="http://maya1900.github.io/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>跟着讶佬深入js--原型到原型链</title>
    <link href="http://maya1900.github.io/article/202109/prototype/"/>
    <id>http://maya1900.github.io/article/202109/prototype/</id>
    <published>2021-09-06T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<p>原文: <code>https://github.com/mqyqingfeng/Blog/issues/2</code></p><h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><p>prototype是函数才有的属性，每一个函数都有一个prototype属性，它指向了一个对象，这个对象是由构造函数创建出来的实例的原型。</p><p>那么什么是原型？每一个js对象在创建的时候就会关联另一个对象，这个对象就是它的原型，每一个对象都会从原型“继承”属性。</p><h2 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h2><p>每一个js对象（除null）都具有的一个属性，它指向了该对象的原型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person1.__proto__ === Person.prototype  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>每个原型都有一个constructor属性指向原构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.constructor === Person  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>当读取实例的属性时，如果找不到，就会查找 与对象关联的原型中的属性，如果还找不到，就会查找原型的原型，直到找到Object对象的原型，如果还没有，则会返回null。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="./attachments/1630970399134.drawio.html" alt="绘图"></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="constructor"><a href="#constructor" class="headerlink" title="constructor"></a>constructor</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person1.constructor === Person <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>实例上并没有constructor属性，实质上说的是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person1.constructor === Person.prototype.constructor <span class="comment">// true</span></span><br><span class="line">Person.prototype.constructor === Person <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="proto-1"><a href="#proto-1" class="headerlink" title="__proto__"></a>__proto__</h3><p>它是一个非标准的方法，使用它时，可以理解返回了Object.getPrototypeOf(obj)</p><h3 id="真的是继承吗？"><a href="#真的是继承吗？" class="headerlink" title="真的是继承吗？"></a>真的是继承吗？</h3><p>继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person1.name);</span><br><span class="line"><span class="built_in">console</span>.log(person2.name);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__ === Person.prototype)  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor === Person) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.constructor === Person) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.constructor === Person.prototype.constructor) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原文: &lt;code&gt;https://github.com/mqyqingfeng/Blog/issues/2&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;prototype&quot;&gt;&lt;a href=&quot;#prototype&quot; class=&quot;headerlink&quot; title=&quot;proto</summary>
      
    
    
    
    <category term="js" scheme="http://maya1900.github.io/categories/js/"/>
    
    
    <category term="js" scheme="http://maya1900.github.io/tags/js/"/>
    
    <category term="原型" scheme="http://maya1900.github.io/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>【9月】打卡</title>
    <link href="http://maya1900.github.io/dayRecord/2109/"/>
    <id>http://maya1900.github.io/dayRecord/2109/</id>
    <published>2021-08-31T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="9-月总结"><a href="#9-月总结" class="headerlink" title="9 月总结"></a>9 月总结</h2><p>9月开启了一个新计划，那就是早起，每天6点起，学习1小时；<br>从结果来看，是坚持下来了，但是输出比较少，东西还是一些反复记不住的；<br>下班后7点8点，基本没看过东西，11点睡觉。<br>一月内巩固了下基础，手写了几个函数，看些博客文章；<br>项目上完成画面小地图，窗口动态调整，日志动态点击，dhtmlx-gantt的封装使用<br>读书？没进行<br>运动？周末早起跑了几次，但是回来却睡了个回笼觉。。<br>就这样？</p><h2 id="09-19"><a href="#09-19" class="headerlink" title="09.19"></a>09.19</h2><p>一周总结：<br>项目上修复bug，测试问题；<br>实现组件窗口的放大缩小，小地图功能；<br>总结两篇文章，call/apply/bind/new的手写与理解<br>防抖<br>每天早起还是有点效果，只是容易困，<br>过了一小时以后就去睡回笼觉了，T_T，还是坚持不够<br>放弃了晨练，身体机能有点下降，每天都特别困和累。</p><h2 id="09-12"><a href="#09-12" class="headerlink" title="09.12"></a>09.12</h2><p>一周总结：<br>每天6点起床，学习1小时；<br>买了课，备战明年金3银4；<br>写了两篇小结，但记得还不是很牢固；<br>有所放松，缺少动力。</p><p>距明年3月还有6个月时间。<br>第一步，扎实基础，预计1个月后模面一面（10月11左右）；<br>具体：每天看3页内容，同时回顾上一天内容；<br>一周末，复习本周学习内容；两周末，复习以前所有内容；<br>第二步，进阶框架知识，预计2-3个月（12月-1月）；<br>具体：看文章，手抄代码，复习，重复，输出。<br>第三步，一点点的算法，项目、相关软技能、查漏补缺等，预计1-2个月（2月-3月）；<br>具体：研究项目、算法，手写。</p><h2 id="09-06"><a href="#09-06" class="headerlink" title="09.06"></a>09.06</h2><p>6点早起第4天。<br>感觉看的东西太杂了，晚上下班又不想看别的，导致每天学习时间不够.<br>考虑加入个学习群吧，每天强制学习。<br>每天没更新，上传有点麻烦，有点懒的搞了额。<br>恩今天就这样。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;9-月总结&quot;&gt;&lt;a href=&quot;#9-月总结&quot; class=&quot;headerlink&quot; title=&quot;9 月总结&quot;&gt;&lt;/a&gt;9 月总结&lt;/h2&gt;&lt;p&gt;9月开启了一个新计划，那就是早起，每天6点起，学习1小时；&lt;br&gt;从结果来看，是坚持下来了，但是输出比较少，东西还是</summary>
      
    
    
    
    <category term="学习打卡" scheme="http://maya1900.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%89%93%E5%8D%A1/"/>
    
    
    <category term="学习打卡" scheme="http://maya1900.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%89%93%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>【10月】打卡</title>
    <link href="http://maya1900.github.io/dayRecord/2110/"/>
    <id>http://maya1900.github.io/dayRecord/2110/</id>
    <published>2021-08-31T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="十一计划"><a href="#十一计划" class="headerlink" title="十一计划"></a>十一计划</h2><p>1号：休息，完成简历<br>2号：出去浪一天<br>3号：准备模一面<br>4号：模面，总结问题，做下步计划<br>5、6、7：弯道超车</p><h2 id="10-24"><a href="#10-24" class="headerlink" title="10.24"></a>10.24</h2><p>为什么一直没更新了？<br>变懒了。<br>学习劲头没那么足了，平时工作加班一直到7、8点回家已经很累了，就想放松；<br>周末只有一天，也是难得休息，emm。。。<br>总结一下，就是动力不足了。<br>只是还是焦虑，下一次我还能找到好工作吗？<br>不学习还有出路吗？<br>要坚持呀少年。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;十一计划&quot;&gt;&lt;a href=&quot;#十一计划&quot; class=&quot;headerlink&quot; title=&quot;十一计划&quot;&gt;&lt;/a&gt;十一计划&lt;/h2&gt;&lt;p&gt;1号：休息，完成简历&lt;br&gt;2号：出去浪一天&lt;br&gt;3号：准备模一面&lt;br&gt;4号：模面，总结问题，做下步计划&lt;br&gt;5、6、</summary>
      
    
    
    
    <category term="学习打卡" scheme="http://maya1900.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%89%93%E5%8D%A1/"/>
    
    
    <category term="学习打卡" scheme="http://maya1900.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%89%93%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>vue3源码的一些前置知识</title>
    <link href="http://maya1900.github.io/article/202108/vue3-pre/"/>
    <id>http://maya1900.github.io/article/202108/vue3-pre/</id>
    <published>2021-08-30T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何调试vue3-源码"><a href="#如何调试vue3-源码" class="headerlink" title="如何调试vue3 源码"></a>如何调试vue3 源码</h2><p>在 package.json里追加<code>&quot;dev:sourcemap&quot;: &quot;node scripts/dev.js --sourcemap&quot;</code>，然后执行 <code>yarn dev:sourcemap</code>，即生成sourcemap，在控制台输出类似<code>vue-next/packages/vue/src/index.ts → packages/vue/dist/vue.global.js</code>的信息。</p><p>新建<code>examples/index.html</code>，引入<code>packages/vue/dist/vue.global.js</code>，打断点调试即可。</p><h2 id="vue3-的工具函数"><a href="#vue3-的工具函数" class="headerlink" title="vue3 的工具函数"></a>vue3 的工具函数</h2><p><a href="https://maya1900.github.io/article/202108/vue-next/">https://maya1900.github.io/article/202108/vue-next/</a></p><h2 id="vuejs的发布流程"><a href="#vuejs的发布流程" class="headerlink" title="vuejs的发布流程"></a>vuejs的发布流程</h2><blockquote><ol><li>选取版本</li><li>执行测试</li><li>更新版本号</li><li>打包编译包</li><li>生成changelog</li><li>提交代码</li><li>发布包</li><li>推送到github</li></ol></blockquote><h2 id="调试-nodejs-代码"><a href="#调试-nodejs-代码" class="headerlink" title="调试 nodejs 代码"></a>调试 nodejs 代码</h2><p>这里即调试发布代码<code>vue-next/scripts/release.js</code></p><p>找到<code>vue-next/package.json</code> 文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;script&quot;: &#123;</span><br><span class="line">&quot;release&quot;: &quot;node scripts/release.js --dry&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>// –dry 只调试,不执行测试和编译 、不执行 推送git等操作</p><p>在vscode里面，scripts的上一行有一个调试的小图标，点击选择release，即可进入调试模式。</p><h2 id="优化代码发布"><a href="#优化代码发布" class="headerlink" title="优化代码发布"></a>优化代码发布</h2><blockquote><p>release-it<br>git flow 管理分支<br>husky和lint-staged 提交commit时校验<br>单元测试jest<br>conventional-changelog<br>git-cz 交互式git commit</p></blockquote><h2 id="看不懂源码怎么办？"><a href="#看不懂源码怎么办？" class="headerlink" title="看不懂源码怎么办？"></a>看不懂源码怎么办？</h2><blockquote><ol><li>调试</li><li>搜索相关文章</li><li>把不懂的地方记录下来，查阅文档</li><li>总结</li></ol></blockquote><h2 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h2><p>koa的使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">app.use(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;Hello Koa&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;如何调试vue3-源码&quot;&gt;&lt;a href=&quot;#如何调试vue3-源码&quot; class=&quot;headerlink&quot; title=&quot;如何调试vue3 源码&quot;&gt;&lt;/a&gt;如何调试vue3 源码&lt;/h2&gt;&lt;p&gt;在 package.json里追加&lt;code&gt;&amp;quot;dev:s</summary>
      
    
    
    
    <category term="vue" scheme="http://maya1900.github.io/categories/vue/"/>
    
    
    <category term="vue3" scheme="http://maya1900.github.io/tags/vue3/"/>
    
    <category term="源码" scheme="http://maya1900.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>vue3里的工具函数</title>
    <link href="http://maya1900.github.io/article/202108/vue-next/"/>
    <id>http://maya1900.github.io/article/202108/vue-next/</id>
    <published>2021-08-28T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<p>ts 转 js,学习。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EMPTY_OBJ = (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>)</span><br><span class="line">    ? <span class="built_in">Object</span>.freeze(&#123;&#125;)</span><br><span class="line">    : &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.freeze 冻结对象的最外层无法修改</span></span><br><span class="line"><span class="keyword">const</span> EMPTY_OBJ_1 = <span class="built_in">Object</span>.freeze(&#123;&#125;);</span><br><span class="line">EMPTY_OBJ_1.name = <span class="string">&#x27;sun&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(EMPTY_OBJ_1.name); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> EMPTY_OBJ_2 = <span class="built_in">Object</span>.freeze(&#123; <span class="attr">props</span>: &#123; <span class="attr">mp</span>: <span class="string">&#x27;hello&#x27;</span>&#125;&#125;);</span><br><span class="line">EMPTY_OBJ_2.props.name = <span class="string">&#x27;sun&#x27;</span>;</span><br><span class="line">EMPTY_OBJ_2.props2 = <span class="string">&#x27;props2&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(EMPTY_OBJ_2.props.name); <span class="comment">// sun</span></span><br><span class="line"><span class="built_in">console</span>.log(EMPTY_OBJ_2.props2); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(EMPTY_OBJ_2); <span class="comment">// &#123; props: &#123; mp: &#x27;hello&#x27;, name: &#x27;sun&#x27; &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> EMPTY_ARR = (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>)</span><br><span class="line">    ? <span class="built_in">Object</span>.freeze([]) : [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// EMPTY_ARR.push(1); // 报错</span></span><br><span class="line">EMPTY_ARR.length = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(EMPTY_ARR.length) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">NOOP 空函数</span><br><span class="line">使用场景： <span class="number">1.</span>方便判断 <span class="number">2.</span>方便压缩</span><br><span class="line"><span class="keyword">const</span> NOOP = <span class="function">() =&gt;</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = &#123;</span><br><span class="line">  render: NOOP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dev = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (dev) &#123;</span><br><span class="line">  instance.render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;render&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (instance.render === NOOP) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NO 永远返回false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NO = <span class="function">() =&gt;</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// isOn 判断字符串以on开头，并且on后首字母大写</span></span><br><span class="line"><span class="keyword">const</span> onRE = <span class="regexp">/^on[^a-z]/</span>;</span><br><span class="line"><span class="keyword">const</span> isOn = <span class="function"><span class="params">key</span> =&gt;</span> onRE.test(key);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isOn(<span class="string">&#x27;onChange&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isOn(<span class="string">&#x27;onchange&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isModelListener = <span class="function"><span class="params">key</span> =&gt;</span> key.startsWith(<span class="string">&#x27;onUpdate&#x27;</span>)</span><br><span class="line"></span><br><span class="line">isModelListener(<span class="string">&#x27;onUpdate:change&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// extend 合并</span></span><br><span class="line"><span class="keyword">const</span> extend = <span class="built_in">Object</span>.assign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">&#x27;sun&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> data2 = extend(data, &#123; <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">name</span>: <span class="string">&#x27;moon&#x27;</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(data); <span class="comment">// &#123; name: &#x27;moon&#x27;, age: 18 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(data2); <span class="comment">// &#123; name: &#x27;moon&#x27;, age: 18 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// remove 移除数组的一项</span></span><br><span class="line"><span class="keyword">const</span> remove = <span class="function">(<span class="params">arr, el</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> i = arr.indexOf(el);</span><br><span class="line">  <span class="keyword">if</span> (i &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    arr.splice(i, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">remove(arr, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hasOwn 是不是自己本身的属性</span><br><span class="line"><span class="keyword">const</span> hasOwnProperty = <span class="built_in">Object</span>.prototype.hasOwnProperty;</span><br><span class="line"><span class="keyword">const</span> hasOwn = <span class="function">(<span class="params">val, key</span>) =&gt;</span> hasOwnProperty.call(val, key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = hasOwn(&#123; <span class="attr">__proto__</span>: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;&#125;, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> b = hasOwn(&#123; <span class="attr">a</span>: <span class="literal">undefined</span> &#125;, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">// false true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> toTypeString = <span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call(val)</span><br><span class="line"><span class="comment">// isArray 判断是否数组</span></span><br><span class="line"><span class="keyword">const</span> isArray = <span class="built_in">Array</span>.isArray</span><br><span class="line"><span class="comment">// isMap 判断是否是Map对象</span></span><br><span class="line"><span class="keyword">const</span> isMap = <span class="function"><span class="params">val</span> =&gt;</span> toTypeString(val) === <span class="string">&#x27;[object Map]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> o = &#123; <span class="attr">p</span>: <span class="string">&#x27;Hello World&#x27;</span> &#125;</span><br><span class="line">map.set(o, <span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">map.get(o);</span><br><span class="line"><span class="built_in">console</span>.log(isMap(map)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isSet 判断是否Set对象</span></span><br><span class="line"><span class="keyword">const</span> isSet = <span class="function"><span class="params">val</span> =&gt;</span> toTypeString(val) === <span class="string">&#x27;[object Set]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isDate 判断是不是date对象</span></span><br><span class="line"> <span class="keyword">const</span> isDate = <span class="function"><span class="params">val</span> =&gt;</span> val <span class="keyword">instanceof</span> <span class="built_in">Date</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(isDate(<span class="keyword">new</span> <span class="built_in">Date</span>()), <span class="number">121</span>) <span class="comment">// true</span></span><br><span class="line"> <span class="built_in">console</span>.log(isDate(&#123; <span class="attr">__proto__</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;)) <span class="comment">// true 不准确</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// isFunction 判断是不是函数</span></span><br><span class="line"><span class="keyword">const</span> isFunction = <span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">typeof</span> val === <span class="string">&#x27;function&#x27;</span>;</span><br><span class="line"><span class="comment">// isString 判断 是不是字符串</span></span><br><span class="line"><span class="keyword">const</span> isString = <span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">typeof</span> val === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line"><span class="comment">// isSymbol 判断是不是Symbol</span></span><br><span class="line"><span class="keyword">const</span> isSymbol = <span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">typeof</span> val === <span class="string">&#x27;symbol&#x27;</span>;</span><br><span class="line"><span class="comment">// isObject 判断 是不是对象</span></span><br><span class="line"><span class="comment">// 判断不为null的原因是typeof null 其实是object</span></span><br><span class="line"><span class="keyword">const</span> isObject = <span class="function"><span class="params">val</span> =&gt;</span> val!== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">&#x27;object&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isPromise 判断是不是promise</span></span><br><span class="line"><span class="keyword">const</span> isPromise = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> isObject(val) &amp;&amp; isFunction(val.then) &amp;&amp; isFunction(val.catch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">  resolve(<span class="string">&#x27;sun&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(isPromise(p1), <span class="number">141</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// objectToString 对象转字符串</span></span><br><span class="line"><span class="keyword">const</span> objectToString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line"><span class="comment">// toRawType 对象转字符串 截取后几位</span></span><br><span class="line"><span class="keyword">const</span> toRawType = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(val).slice(<span class="number">8</span>, -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(toRawType(<span class="string">&#x27;&#x27;</span>), <span class="number">150</span>) <span class="comment">// &#x27;String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isPlainOject 判断是不是纯粹的对象</span></span><br><span class="line"><span class="keyword">const</span> isPlainObject = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> toTypeString(val) === <span class="string">&#x27;[object Object]&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// isIntegerKey 判断是不是数字型的字符串key型</span></span><br><span class="line"><span class="keyword">const</span> isIntegerKey = <span class="function"><span class="params">key</span> =&gt;</span> isString(key) &amp;&amp;</span><br><span class="line">    key !== <span class="string">&#x27;NaN&#x27;</span> &amp;&amp;</span><br><span class="line">    key[<span class="number">0</span>] !== <span class="string">&#x27;-&#x27;</span> &amp;&amp;</span><br><span class="line">    <span class="string">&#x27;&#x27;</span> + <span class="built_in">parseInt</span>(key, <span class="number">10</span>) === key;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isIntegerKey(<span class="string">&#x27;a&#x27;</span>), <span class="number">163</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(isIntegerKey(<span class="string">&#x27;1&#x27;</span>), <span class="number">164</span>); <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.charAt(<span class="number">0</span>) <span class="comment">// a</span></span><br><span class="line"><span class="comment">// charAt 与数组形式不同的是，取不到值会返回‘’，而数组形式取清台值会返回undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// makeMap &amp;&amp; isReservedProp</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeMap</span>(<span class="params">str, expectsLowerCase</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> list = str.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    map[list[i]] = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> expectsLowerCase ? <span class="function"><span class="params">val</span> =&gt;</span> !!map[val.toLowerCase()] : <span class="function"><span class="params">val</span> =&gt;</span> !!map[val];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> isReservedProp = makeMap(<span class="string">&#x27;,key,ref,&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;onVnodeBeforeMount,onVnodeMounted,&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;onVnodeBeforeUpdate,onVnodeUpdated,&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;onVnodeBeforeUnmount,onVnodeUnmounted&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isReservedProp(<span class="string">&#x27;key&#x27;</span>), <span class="number">182</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//cacheStringFunction 缓存</span></span><br><span class="line"><span class="keyword">const</span> cacheStringFunction = <span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> hit = cache[str];</span><br><span class="line">    <span class="keyword">return</span> hit || (cache[str] = fn(str))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hasChanged 判断是不是有变化</span></span><br><span class="line"><span class="keyword">const</span> hasChanged = <span class="function">(<span class="params">val,oldVal</span>) =&gt;</span> val !== oldVal &amp;&amp; (val === val || oldVal === oldVal)</span><br><span class="line"></span><br><span class="line"><span class="comment">// invokeArrayFns 执行数组里的函数</span></span><br><span class="line"><span class="keyword">const</span> invokeArrayFns = <span class="function">(<span class="params">fns, arg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fns.length; i++) &#123;</span><br><span class="line">    fns[i](arg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val + <span class="string">&#x27; is me&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;I&#x27;m &quot;</span> + val)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">invokeArrayFns(arr, <span class="string">&#x27;sun&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// def 定义对象属性</span></span><br><span class="line"> <span class="keyword">const</span> def = <span class="function">(<span class="params">obj, key, value</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">     configurable: <span class="literal">true</span>,</span><br><span class="line">     enumerable: <span class="literal">false</span>,</span><br><span class="line">     value</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// value --- 属性返回值</span></span><br><span class="line"> <span class="comment">// writable --- 属性是否可写</span></span><br><span class="line"> <span class="comment">// enumerable --- 属性是否枚举</span></span><br><span class="line"> <span class="comment">// configurable --- 属性可否删除</span></span><br><span class="line"> <span class="comment">// set() --- 更新调用函数</span></span><br><span class="line"> <span class="comment">// get() --- 获取调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据描述符（enumerable,configurable,value,writable） 与</span></span><br><span class="line"><span class="comment">// 存取描述符(enumerable,configurable,set(),get()) 是互斥关系</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转数字</span></span><br><span class="line"><span class="keyword">const</span> toNumber = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> n = <span class="built_in">parseFloat</span>(val);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">isNaN</span>(n) ? val : n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(toNumber(<span class="string">&#x27;111&#x27;</span>), <span class="number">237</span>) <span class="comment">// 111</span></span><br><span class="line"><span class="built_in">console</span>.log(toNumber(<span class="string">&#x27;a111&#x27;</span>), <span class="number">238</span>) <span class="comment">// a111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局对象getGlobalThis</span></span><br><span class="line">let_globalThis;</span><br><span class="line"><span class="keyword">const</span> getGlobalThis = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (_globalThis ||</span><br><span class="line">    (_globalThis =</span><br><span class="line">      <span class="keyword">typeof</span> globalThis !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">          ? globalThis</span><br><span class="line">          : <span class="keyword">typeof</span> self !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">              ? self</span><br><span class="line">              : <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">                  ? <span class="built_in">window</span></span><br><span class="line">                  : <span class="keyword">typeof</span> <span class="built_in">global</span> !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">                      ? <span class="built_in">global</span></span><br><span class="line">                      : &#123;&#125;));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有globalThis用它</span></span><br><span class="line"><span class="comment">// 有self用它，web worker没有window对象，可用self访问全局对象</span></span><br><span class="line"><span class="comment">// 有window用window</span></span><br><span class="line"><span class="comment">// 有global用它，node环境下使用global</span></span><br><span class="line"><span class="comment">// 都没有返回空对象，可能在小程序环境下</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ts 转 js,学习。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span</summary>
      
    
    
    
    <category term="vue" scheme="http://maya1900.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="http://maya1900.github.io/tags/vue/"/>
    
    <category term="vue3" scheme="http://maya1900.github.io/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>vue3的一些知识点</title>
    <link href="http://maya1900.github.io/article/202108/vue3/"/>
    <id>http://maya1900.github.io/article/202108/vue3/</id>
    <published>2021-08-21T16:00:00.000Z</published>
    <updated>2022-04-02T13:54:16.015Z</updated>
    
    <content type="html"><![CDATA[<p>入口main.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入createApp函数,创建对应的应用,产生应用的实例对象</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入app组件(所有组件的父级组件)</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="comment">// 创建app应用返回对应的实例对象,调用mount方法进行挂载  挂载到#app节点上去</span></span><br><span class="line">createApp(App).mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Vue2组件中的html模板中必须要有一对根标签,Vue3组件的html模板中可以没有根标签</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img alt=<span class="string">&quot;Vue logo&quot;</span> src=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span><br><span class="line">  &lt;!-- 使用子级组件 --&gt;</span><br><span class="line">  &lt;HelloWorld msg=<span class="string">&quot;Welcome to Your Vue.js + TypeScript App&quot;</span> /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">App.vue</span><br><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">// 这里可以书写TS代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// defineComponent函数,目的是定义一个组件 内部可以传入一个配置对象</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="comment">//引入子级组件</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;./components/HelloWorld.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露出去一个定义好的组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  <span class="comment">// 当前组件的名字</span></span><br><span class="line">  name: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="comment">// 注册组件</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="comment">// 注册一个子级组件</span></span><br><span class="line">    HelloWorld,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h1><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p>setup只在beforeCreate生命周期之前执行一次，所有的Composition API函数都在此使用。</p><h3 id="setup的参数-props-context"><a href="#setup的参数-props-context" class="headerlink" title="setup的参数(props,context)"></a>setup的参数(props,context)</h3><ul><li><p>props: 是一个对象,里面有父级组件向子级组件传递的数据,并且是在子级组件中使用props接收到的所有的属性</p></li><li><p>context：上下文对象，可以通过es6语法解构 setup(props, {attrs, slots, emit})</p><ul><li>attrs: 获取当前组件标签上所有没有通过props接收的属性的对象, 相当于 this.$attrs</li><li>slots: 包含所有传入的插槽内容的对象, 相当于 this.$slots</li><li>emit: 用来分发自定义事件的函数, 相当于 this.$emit</li></ul></li></ul><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>定义一个响应式的数据(一般用来定义一个基本类型的响应式数据Undefined、Null、Boolean、Number和String)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xxx = ref(initValue):</span><br></pre></td></tr></table></figure><p>script中操作数据需要使用xxx.value的形式，而模板中不需要添加.value</p><h3 id="获取dom节点"><a href="#获取dom节点" class="headerlink" title="获取dom节点"></a>获取dom节点</h3><p>在Vue2中我们通过this.$refs来获取dom节点，Vue3中我们通过ref来获取节点</p><p>首先需要在标签上添加ref=’xxx’，然后再setup中定义一个初始值为null的ref类型,名字要和标签的ref属性一致</p><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = reactive(obj)</span><br></pre></td></tr></table></figure><p>定义多个数据的响应式，接收一个普通对象然后返回该普通对象的响应式代理器对象(Proxy)</p><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><p>与Vue2中的computed配置功能一致，返回的是一个ref类型的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fullName1 = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> user.firstName + user.lastName;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fullName2 = computed(&#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user.firstName + <span class="string">&#x27;_&#x27;</span> + user.lastName;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">val: string</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> names = val.split(<span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">    user.firstName = names[<span class="number">0</span>];</span><br><span class="line">    user.lastName = names[<span class="number">1</span>];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>与Vue2中的watch配置功能一致,监视指定的一个或多个响应式数据, 一旦数据变化, 就自动执行监视回调</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch(source, callback, [options])</span><br></pre></td></tr></table></figure><ul><li>source: 可以支持 string,Object,Function,Array; 用于指定要侦听的响应式变量</li><li>callback: 执行的回调函数</li><li>options：支持 deep、immediate 和 flush 选项。</li></ul><p>watch监听非响应式数据的时候需要使用回调函数的形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch([<span class="function">()=&gt;</span>user.firstName,<span class="function">()=&gt;</span>user.lastName,fullName3],<span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;我执行了&#x27;</span>)&#125;)</span><br></pre></td></tr></table></figure><p>stop 停止监听:调用watch()函数的返回值</p><h2 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h2><p>监视数据发生变化时执行回调，不用直接指定要监视的数据, 回调函数中使用的哪些响应式数据就监视哪些响应式数据，默认初始时就会执行第一次, 从而可以收集需要监视的数据。</p><p>watchEffect 不需要手动传入依赖<br>watchEffect 会先执行一次用来自动收集依赖<br>watchEffect 无法获取到变化前的值， 只能获取变化后的值</p><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><p>把一个响应式对象转换成普通对象，该普通对象的每个属性都是一个 ref</p><p>利用toRefs可以将一个响应式 reactive 对象的所有原始属性转换为响应式的ref属性。</p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="自定义Hooks"><a href="#自定义Hooks" class="headerlink" title="自定义Hooks"></a>自定义Hooks</h2><h2 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h2><p>Teleport 提供了一种干净的方法, 让组件的html在父组件界面外的特定标签(很可能是body)下插入显示 换句话说就是可以把 子组件 或者 dom节点 插入到任何你想插入到的地方去</p><h2 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h2><p>它们允许我们的应用程序在等待异步组件时渲染一些后备内容，可以让我们创建一个平滑的用户体验</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Suspense&gt;</span><br><span class="line">    &lt;template v-slot:<span class="keyword">default</span>&gt;</span><br><span class="line">      &lt;!-- 异步组件 --&gt;</span><br><span class="line">      &lt;AsyncComp /&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;template v-slot:fallback&gt;</span><br><span class="line">      &lt;!-- 后备内容 --&gt;</span><br><span class="line">      &lt;h1&gt;LOADING...&lt;/h1&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/Suspense&gt;</span><br></pre></td></tr></table></figure><h2 id="片段（Fragment）"><a href="#片段（Fragment）" class="headerlink" title="片段（Fragment）"></a>片段（Fragment）</h2><p>在 Vue2.x 中， template中只允许有一个根节点，但是在 Vue3.x 中，你可以直接写多个根节点，</p><h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree-Shaking"></a>Tree-Shaking</h2><h2 id="语法糖-script-setup"><a href="#语法糖-script-setup" class="headerlink" title="语法糖 script setup"></a>语法糖 script setup</h2><p>只需要在script标签中添加setup，组件只需引入不用注册，属性和方法也不用返回，setup函数也不需要，甚至export default都不用写了，不仅是数据，计算属性和方法，甚至是自定义指令也可以在我们的template中自动获得。</p><p>setup script语法糖提供了三个新的API来供我们使用：defineProps、defineEmit和useContext</p><ul><li>defineProps 用来接收父组件传来的值props。</li><li>defineEmit   用来声明触发的事件表。</li><li>useContext  用来获取组件上下文context。</li></ul><h2 id="跨组件通讯mitt-js"><a href="#跨组件通讯mitt-js" class="headerlink" title="跨组件通讯mitt.js"></a>跨组件通讯mitt.js</h2><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>bind =&gt; beforeMount<br>inserted =&gt; mounted<br>beforeUpdate: 新的钩子，会在元素自身更新前触发<br>update =&gt; 移除！<br>componentUpdated =&gt; updated<br>beforeUnmount: 新的钩子，当元素自身被卸载前触发<br>unbind =&gt; unmounted</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;入口main.js:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="vue" scheme="http://maya1900.github.io/categories/vue/"/>
    
    
    <category term="vue3" scheme="http://maya1900.github.io/tags/vue3/"/>
    
  </entry>
  
</feed>
